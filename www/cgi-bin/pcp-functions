#!/bin/sh
# pcp-functions
# These are the common functions used by piCorePlayer

# Version 0.20 2014-10-09 SBP
    Clean up in the I2S section

# Version: 0.19 2014-10-09 GE
#	Added pcp_uptime_seconds routine.
#	Updated pcp_uptime_minutes routine.

# Version: 0.18 2014-10-08 GE
#	Updated pcp_uptime_minutes routine.

# Version: 0.17 2014-10-04 GE
#	Updated pcp_disable_i2s()
#	Added pcp_mount_mmcblk0p1_nohtml and pcp_umount_mmcblk0p1_nohtml.
#	Added pcp_backup_nohtml.

# Version: 0.16 2014-10-02 GE
#	Added pcp_uptime_minutes routine.
#	Added variable $SERVER_IP_NO_PORT to pcp_auto_start_lms.
#	Updated footer to use style footer.
#	Activated $MODE=5 for pcp_controls.

# Version: 0.15 2014-09-25 SBP
#	Added support for the hifiberry DAC+ and Digi+
#	Added support for the IQaudIO+ DAC

# Version: 0.14 2014-09-20 GE
#	Modified HTML to improve cross browser support.

# Version: 0.13 2014-09-09 GE
#	Added pcp_auto_start_lms.
#	Removed $LMSIP using $SERVER_IP instead.

# Version: 0.12 2014-09-08 GE
#	Fixed pcp_controls_mac_address.

# Version: 0.11 2014-09-07 SBP
#	Added support for the DAC+ cards.

# Version: 0.10 2014-09-05 GE
#	Added INSITU_DOWNLOAD variable.

# Version: 0.09 2014-09-04 GE
#	Added timezone routine.
#	Changed size of config.cfg textarea.

# Version: 0.08 2014-08-31 GE
#	Added /bin/sh to first line.

# Version: 0.08 2014-08-26 GE
#	Removed TEST from controls.
#	Fixed TZ/date routine in footer.
#	Renamed init.d file squeezelite_initd to squeezelite.

# Version: 0.07 2014-08-17 SBP
#	Removed backup from pcp_reboot and pcp_shutdown.
#	Added piCorePlayer home as system wide variable.

# Version: 0.06 2014-08-14 GE
#	Added linux release (pcp_linux_release) to pcp_footer.
#	Added pcp_squeezelite_restart, pcp_squeezelite_restart routines.

# Version: 0.05 2014-08-12 GE
#	Added sudo to pcp_squeezelite_version routine.

# Version: 0.04 2014-08-11 SBP
#	Updated $LMSIP to use $SERVER_IP (set in Squeezelite settings).
#	Updated pcp_controls routine.

# Version: 0.03 2014-08-05 GE
#	Updated pcp_controls_mac_address routine to check for $WIFI = "on".

# Version: 0.02 2014-07-18 GE
#	Added routine pcp_config_mac_address, pcp_controls_mac_address, pcp_go_main_button.
#	Updated routine pcp_footer to use pcp_controls_mac_address.
#	Minor indent reformatting.

# Version: 0.01 2014-06-25 GE
#	Original.

#=========================================================================================
# System wide variables
#-----------------------------------------------------------------------------------------
pcp_variables() {
	# The following variable are standard piCorePlayer variables, do not edit
	CONFIGCFG=/usr/local/sbin/config.cfg
	CONFIGTXT=/mnt/mmcblk0p1/config.txt
	CMDLINETXT=/mnt/mmcblk0p1/cmdline.txt
	BOOTLOCAL=/opt/bootlocal.sh
	BOOTSYNC=/opt/bootsync.sh
	SHUTDOWN=/opt/shutdown.sh
	HTTPDCONF=/home/tc/httpd.conf
	WIFIDB=/home/tc/wifi.db
	VOLUME=/mnt/mmcblk0p1
	DEVICE=/dev/mmcblk0p1
	UPD_PCP=/tmp/upd_picoreplayer
	pCPHOME=/home/tc/www/cgi-bin

	INSITU_DOWNLOAD="http://sourceforge.net/projects/picoreplayer/files/insitu"

	# Set $DEBUG to 1 to display debug information when running scripts (default=0)
	DEBUG=1

	# Set $TEST to 1 to get features that are under test and set to 2 to show old features that might be on its way out (default=0)
	TEST=1

	# Set $MODE to the desired level (1-5) 1=basic -> 5=advanced (default=1) (99=greg only)
	MODE=5

	# Use test download area
	[ $DEBUG = 1 ] && [ $TEST = 1 ] && INSITU_DOWNLOAD="http://sourceforge.net/projects/pcpsl/files/insitu"
}

pcp_variables
. $CONFIGCFG

#=========================================================================================
# Update the Timezone routine
#
# Called from:
#			timezone.cgi
#			do_rebootstuff.sh
#-----------------------------------------------------------------------------------------
pcp_set_timezone() {
	[ -f /etc/sysconfig/timezone ] && sudo rm -f /etc/sysconfig/timezone
	TIMEZONE=`sudo /usr/local/sbin/httpd -d $TIMEZONE`
	echo "TZ="$TIMEZONE > /etc/sysconfig/timezone
	sudo chown root:root /etc/sysconfig/timezone
	sudo chmod 644 /etc/sysconfig/timezone
	unset TZ
	export TZ=$TIMEZONE
}

#=========================================================================================
# The MAC addresses used by this piCorePlayer can be:
#	1. An arbitrarily assigned MAC address via Squeezelite software (in config.cfg)
#	2. The MAC address of the wireless card (if installed)
#	3. The physical MAC address of ethernet card (Raspberry Pi Model B)
#		PLAYER_MAC=${MAC_ADDRESS:-$(pcp_eth0_mac_address)}
#-----------------------------------------------------------------------------------------
pcp_config_mac_address() {
	echo $MAC_ADDRESS
}

pcp_wlan0_mac_address() {
	# The wireless MAC address (if installed)
	ifconfig wlan0|grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'|tr '[A-Z]' '[a-z]'
}

pcp_eth0_mac_address() {
	# The physical MAC address of Raspberry Pi Model B
	ifconfig eth0|grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'|tr '[A-Z]' '[a-z]'
}

pcp_controls_mac_address() {
	ifconfig eth0 | grep inet &> /dev/null
	eth0_IP=$?
	ifconfig wlan0 | grep inet &> /dev/null
	wlan0_IP=$?
	PLAYER_MAC=$(pcp_eth0_mac_address)
	if [ $WIFI = "on" ]; then
		if [ $wlan0_IP = 0 ]; then
			PLAYER_MAC=$(pcp_wlan0_mac_address)
		fi
		if [ $eth0_IP = 0 ]; then
			PLAYER_MAC=$(pcp_eth0_mac_address)
		fi
	fi
	if [ $(pcp_config_mac_address) ]; then
		PLAYER_MAC=$(pcp_config_mac_address)
	fi
	echo $PLAYER_MAC
}

#=========================================================================================
# Banner, navigation, footer and controls html
#-----------------------------------------------------------------------------------------
pcp_banner() {
	echo '<!-- Start of pcp_banner -->'
	echo '<table border="0" bgcolor="000000" cellspacing="0" cellpadding="0" width="960">'
	echo '  <tr>'
	echo '    <td>'
	echo '      <p><img src="../images/banner.jpg" alt="piCorePlayer" width="958" /></p>'
	echo '    </td>'
	echo '  </tr>'
	echo '</table>'
	echo '<!-- End of pcp_banner -->'
}

pcp_navigation() {
	echo '<!-- Start of pcp_navigation -->'
	echo '<table border="0" bgcolor="000000" cellspacing="0" cellpadding="0" width="960">'
	echo '  <tr>'
	echo '    <td>'
	echo '      <p>'
	echo '        <a class="nav" href="main.cgi" title="pCP - Main Page">Main Page</a>'
	echo '        <a class="nav" href="squeezelite.cgi" title="pCP - Squeezelite Settings">Squeezelite Settings</a>'
	echo '        <a class="nav" href="wifi.cgi" title="pCP - WIFI Settings">WIFI Settings</a>'
	echo '        <a class="nav" href="tweaks.cgi" title="pCP - Tweaks">Tweaks</a>'
	echo '        <a class="nav" href="about.cgi" title="pCP - About">About&nbsp;&nbsp;&nbsp;</a>'
	echo '      </p>'
	echo '    </td>'
	echo '  </tr>'
	echo '</table>'
	echo '<!-- End of pcp_navigation -->'
}

pcp_footer() {
	[ -f /etc/sysconfig/timezone ] && . /etc/sysconfig/timezone

	echo '<!-- Start of pcp_footer -->'
	echo '<table border="0" bgcolor="000000" cellspacing="0" cellpadding="0" width="960">'
	echo '  <tr>'
	echo '    <td height="24">'
	echo '      <p class="footer">
					'$NAME' |
					'$(pcp_controls_mac_address)' | 
					piCorePlayer v'$(pcp_picoreplayer_version)' | 
					linux '$(pcp_linux_release)' | 
					piCore v'$(pcp_picore_version)' | 
					Squeezelite v'$(pcp_squeezelite_version)' | 
					'`TZ=$TZ date`'</p>'
	echo '    </td>'
	echo '  </tr>'
	echo '</table>'
	echo '<!-- End of pcp_footer -->'
}

pcp_controls() {
	if [ $MODE -gt 4 ]; then
		if [ X"" != X"$SERVER_IP" ]; then
			echo '<!-- Start of pcp_controls -->'
			echo '<table border="0" bgcolor="000000" cellspacing="0" cellpadding="0" width="960">'
			echo '  <tr>'
			echo '    <td>'
			echo '      <p>'
			echo '        <a class="nav2" href="controls.cgi?COMMAND=random_tracks" title="Random">Random</a>'
			echo '        <a class="nav2" href="controls.cgi?COMMAND=volume_up" title="Volume Up">Volume Up ^</a>'
			echo '        <a class="nav2" href="controls.cgi?COMMAND=volume_down" title="Volume Down">Volume Down v</a>'
			echo '        <a class="nav2" href="controls.cgi?COMMAND=track_prev" title="Previous Track">&lt; Previous Track</a>'
			echo '        <a class="nav2" href="controls.cgi?COMMAND=track_next" title="Next Track">Next Track &gt;</a>'
			echo '        <a class="nav2" href="controls.cgi?COMMAND=play" title="Play">Play</a>'
			echo '        <a class="nav2" href="controls.cgi?COMMAND=stop" title="Stop">Stop</a>'
			echo '      </p>'
			echo '    </td>'
			echo '  </tr>'
			echo '</table>'
			echo '<!-- End of pcp_controls -->'
		fi
	fi
}

#=========================================================================================
# Versions
#-----------------------------------------------------------------------------------------
pcp_picore_version() {
	echo `version`
}

pcp_picoreplayer_version() {
	. /usr/local/sbin/piversion.cfg
	echo $PIVERS | awk '{ print $2 }'
}

pcp_squeezelite_version() {
	sudo /mnt/mmcblk0p2/tce/squeezelite-armv6hf -t | awk '/^Squeezelite/ { print $2 }' | sed s/v// | sed s/,//
}

pcp_linux_release() {
	uname -r
}

#=========================================================================================
# Tiny Core user (tc)
#-----------------------------------------------------------------------------------------
pcp_tc_user() {
	cat /etc/sysconfig/tcuser
}

#=========================================================================================
# Show various configuration and setup files
#-----------------------------------------------------------------------------------------
pcp_show_config_cfg() {
	echo '<h2>[ INFO ] Current config.cfg</h2>'
	echo '<textarea name="TextBox" cols="120" rows="26">'
	cat $CONFIGCFG
	echo '</textarea>'
}

pcp_show_config_txt() {
	echo '<h2>[ INFO ] Current config.txt</h2>'
	echo '<textarea name="TextBox" cols="120" rows="15">'
	cat $CONFIGTXT
	echo '</textarea>'
}	

pcp_show_cmdline_txt() {
	echo '<h2>[ INFO ] Current cmdline.txt</h2>'
	echo '<textarea name="myTextBox" cols="120" rows="5">'
	cat $CMDLINETXT
	echo '</textarea>'
}

pcp_show_bootlocal_sh() {
	echo '<h2>[ INFO ] Current bootlocal.sh</h2>'
	echo '<textarea name="TextBox" cols="120" rows="15">'
	cat $BOOTLOCAL
	echo '</textarea>'
}

pcp_show_bootsync_sh() {
	echo '<h2>[ INFO ] Current bootsync.sh</h2>'
	echo '<textarea name="TextBox4" cols="120" rows="8">'
	cat $BOOTSYNC
	echo '</textarea>'
}

#=========================================================================================
# Busybox httpd
#-----------------------------------------------------------------------------------------	
pcp_httpd_query_string() {
	# Process the $QUERY_STRING from httpd
	eval $(echo "$QUERY_STRING" | awk -F'&' '{ for(i=1;i<=NF;i++) { print $i} }')
	[ $DEBUG = 1 ] && echo '<p class="debug">[ DEBUG ] $QUERY_STRING: '$QUERY_STRING'</p>'
}

#=========================================================================================
# Start/stop Squeezelite
#-----------------------------------------------------------------------------------------
pcp_squeezelite_start() {
	echo '<p class="info">[ INFO ] '
	sudo /usr/local/etc/init.d/squeezelite start
	echo '</p>'
}

pcp_squeezelite_stop() {
	echo '<p class="info">[ INFO ] '
	sudo /usr/local/etc/init.d/squeezelite stop
	echo '</p>'
}

# Not used yet.
pcp_squeezelite_restart() {
	echo '<p class="info">[ INFO ] '
	sudo /usr/local/etc/init.d/squeezelite restart
	echo '</p>'
}

pcp_squeezelite_status() {
	sudo /usr/local/etc/init.d/squeezelite status > /dev/null 2>&1
	echo $?
}

#=========================================================================================
# Determine the system uptime in seconds or minutes
#-----------------------------------------------------------------------------------------
pcp_uptime_seconds() {
	printf "%.0f\n" $(cat /proc/uptime | awk '{print $1}')
}

pcp_uptime_minutes() {
	printf "%.0f\n" $(cat /proc/uptime | awk '{print $1/60}')
}

#=========================================================================================
# Auto start LMS routine
#	This routine will allow you to set a LMS command to auto start a LMS command after
#	a "hard power on". This will be handy for people building pseudo radios. This routine
#	is called from do_rebootstuff.sh.
# 
# Example $AUTOSTARTLMS:
#	randomplay tracks
#	playlist play http://opml.radiotime.com/Tune.ashx?id=s99312&formats=aac,ogg,mp3&partnerId=16&serial=05edb36d50ac02d1d1eeaa23a487968a
#	playlist play http://stream-tx1.radioparadise.com/aac-32
#	playlist play http://radioparadise.com/m3u/aac-128.m3u
#-----------------------------------------------------------------------------------------
pcp_auto_start_lms() {
	if [ X"" != X"$SERVER_IP" ] && [ X"" != X"$AUTOSTARTLMS" ]; then
		PLAYER_MAC=$(pcp_controls_mac_address)
		SERVER_IP_NO_PORT=`echo $SERVER_IP | awk -F: '{ print $1 }'`
		# Decode variables using httpd, no quotes
		AUTOSTARTLMS=`sudo /usr/local/sbin/httpd -d $AUTOSTARTLMS`
		echo "$PLAYER_MAC $AUTOSTARTLMS" | telnet $SERVER_IP_NO_PORT:9090
	fi
}

#=========================================================================================
# Useful buttons
#-----------------------------------------------------------------------------------------
pcp_go_main_button() {
	echo '<form name="Main" action="main.cgi" method="get" id="Main">'
	echo '<p><input type="submit" class="large" value="Go to Main Page" />&nbsp;&nbsp;Go to Main Page</form></p>'
}

pcp_go_back_button() {
	echo '<p><input type="button" value="Go Back" onclick="javascript:location.href=document.referrer;" />&nbsp;&nbsp;Go back to previous page</p>'
}

pcp_refresh_button() {
	echo '<p><input type="button" value="Refresh" onClick="window.location.reload()" />&nbsp;&nbsp;Refresh this page</p>'
}

pcp_reboot_button() {
	echo "<p><input type="button" value="Reboot" onClick=\"javascript:pcp_confirm('Reboot piCorePlayer?','reboot.cgi')\" />&nbsp;&nbsp;Reboot piCorePlayer</p>"
}

#=========================================================================================
# Backup mydata
#-----------------------------------------------------------------------------------------
pcp_backup() {
	# Delete any previous backup_done file
	[ -e /tmp/backup_done ] && sudo rm -f /tmp/backup_done

	# Do a backup - filetool.sh backs up files in .filetool.lst
	echo '<p class="info">[ INFO ] '
	sudo filetool.sh -b
	sync
	echo '</p>'

	# If backup_status file exists and is non-zero in size then an error has occurred
	if [ -s /tmp/backup_status ]; then
		echo '<p class="error">[ ERROR ] Backup status</p>'
		echo '<pre>'
		cat /tmp/backup_status
		echo '</pre>'
	fi

	# If backup_done exists then the backup was successful
	if [ -f /tmp/backup_done ]; then
		echo '<p class="ok">[ OK ] Backup successful.</p>'
	else
		echo '<p class="error">[ ERROR ] Backup failed.</p>'
	fi
}

pcp_backup_nohtml() {
	# Delete any previous backup_done file
	[ -e /tmp/backup_done ] && sudo rm -f /tmp/backup_done

	# Do a backup - filetool.sh backs up files in .filetool.lst
	echo -n "[ INFO ] "
	sudo filetool.sh -b
	sync

	# If backup_status file exists and is non-zero in size then an error has occurred
	if [ -s /tmp/backup_status ]; then
		echo '[ ERROR ] Backup status.'
		cat /tmp/backup_status
	fi

	# If backup_done exists then the backup was successful
	if [ -f /tmp/backup_done ]; then
		echo '[ OK ] Backup successful.'
	else
		echo '[ ERROR ] Backup failed.'
	fi
}

#=========================================================================================
# Display which script is running
#-----------------------------------------------------------------------------------------
pcp_running_script() {
	[ $DEBUG = 1 ] && echo '<p class="debug">[ DEBUG ] Running '$0'...</p>'
}

#=========================================================================================
# Mounting/unmounting mmcblk0p1 - boot partition
#-----------------------------------------------------------------------------------------
pcp_mount_mmcblk0p1() {
	# Check if mmcblk0p1 is mounted otherwise mount it
	if mount | grep $VOLUME; then
		echo '<p class="error">[ ERROR ] '$VOLUME' already mounted</p>'
	else
		echo '<p class="info">[ INFO ] Mounting '$VOLUME'...</p>'
		echo '<p style="font-size:10px">'
		sudo mount $DEVICE;
	#	echo '</p>'
	fi
}

pcp_umount_mmcblk0p1() {
	# Unmount mmcblk0p1
	sync
	sync
	echo '<p class="info">[ INFO ] Unmounting '$VOLUME'...</p>'
	sudo umount $DEVICE
}

pcp_mount_mmcblk0p1_nohtml() {
	# Check if mmcblk0p1 is mounted otherwise mount it
	if mount | grep $VOLUME; then
		echo '[ ERROR ] '$VOLUME' already mounted'
	else
		echo '[ INFO ] Mounting '$VOLUME'...'
		sudo mount $DEVICE;
	fi
}

pcp_umount_mmcblk0p1_nohtml() {
	# Unmount mmcblk0p1
	sync
	sync
	echo '[ INFO ] Unmounting '$VOLUME'...'
	sudo umount $DEVICE
}

#=========================================================================================
# Reboot/shutdown piCorePlayer
#-----------------------------------------------------------------------------------------
pcp_reboot() {
	echo '<p class="info">[ INFO ] piCorePlayer is rebooting...</p>'
	sudo reboot
}

pcp_shutdown() {
	echo '<p class="info">[ INFO ] piCorePlayer is shutting down...</p>'
	exitcheck.sh
}

#=========================================================================================
# Add/remove modules
#-----------------------------------------------------------------------------------------
pcp_disable_i2s() {
	#pcp_squeezelite_stop
	sudo /usr/local/etc/init.d/squeezelite stop
    sleep 1
	# Remove HiFiBerry digi/DAC and IQaudIO DAC modules
	sudo modprobe -qr snd_soc_wm8804
	sudo modprobe -qr snd_soc_hifiberry_dac
	sudo modprobe -qr snd_soc_hifiberry_digi
	sudo modprobe -qr snd_soc_iqaudio_dac
}

pcp_enable_i2s_dac() {
	pcp_disable_i2s

	# Load the correct modules for HiFiBerry DAC 
	sudo modprobe -q snd_soc_bcm2708_i2s
	sudo modprobe -q bcm2708_dmaengine
	sudo modprobe -q snd_soc_pcm5102a
	sudo modprobe -q snd_soc_hifiberry_dac
}

pcp_enable_i2s_digi() {
	pcp_disable_i2s

	# Load the correct modules for HiFiBerry Digi and HifiBerry Digi+
	sudo modprobe -q snd_soc_bcm2708_i2s
	sudo modprobe -q bcm2708_dmaengine
	sudo modprobe -q snd_soc_wm8804
	sleep 1
	sudo modprobe -q snd_soc_hifiberry_digi
}

pcp_enable_iqaudio_dac() {
	pcp_disable_i2s

	# Load the correct modules for IQaudio DAC and I think IQaudIO DAC+ 
	sudo modprobe -q snd_soc_bcm2708_i2s
	sudo modprobe -q bcm2708_dmaengine
	sudo modprobe -q snd_soc_pcm512x
	sleep 1
	sudo modprobe -q snd_soc_iqaudio_dac
	sleep 1
}

pcp_enable_hifiberry_dac_p() {
	pcp_disable_i2s

	# Load the correct modules for HiFiBerry DAC+ 
	sudo modprobe snd_soc_pcm512x_i2c 
	sudo modprobe snd_soc_pcm512x
	sudo modprobe snd_soc_bcm2708_i2s
	sudo modprobe bcm2708_dmaengine
	sudo modprobe snd_pcm_dmaengine
	sudo modprobe snd_soc_hifiberry_dacplus
}


