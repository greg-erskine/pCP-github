#!/bin/sh
# pcp-functions
# These are the common functions used by piCorePlayer.

# Version: 0.30 2015-03-06 GE
#	Added pcp_internet_accessible.
#	Added pcp_sourceforge_accessible.

# Version: 0.29 2015-02-15 SBP
#	Redirected errors for pcp_wlan0_mac_address, pcp_eth0_mac_address, pcp_controls_mac_address.
#	Commented out sudo modprobe -q bcm2708_dmaengine.

# Version: 0.28 2015-02-11 GE
#	Fixed pcp_auto_start_lms and pcp_auto_start_fav.
#	Added ANSI colours from tc-functions.

# Version: 0.27 2015-02-08 SBP
#	Modified pcp_html_head so no refresh if in debug mode.

# Version: 0.26 2015-02-05 GE
#	Modified pcp_lmsip.
#	Improved pcp_reset_config_to_defaults.
#	Added pcp_dianostics toolbar.
#	Moved controls and LMS related items to pcp-lms-functions.
#	Added pcp_which_squeezelite, pcp_eth0_ip, pcp_wlan0_ip.

# Version: 0.25 2015-01-26 SBP
#	Added CLOSEOUT.
#	Added pcp_reset_config_to_defaults.
#	Added pcp_mount_device, pcp_umount_device.
#	Added pcp_user_commands.
#	Updated pcp_banner.

# Version: 0.24 2015-01-20 GE
#	Added colour coding to Squeezelite in pcp_footer.
#	Updated date display on pcp_footer.
#	Updated Autostart LMS.
#	Added pcp_auto_start_fav, pcp_autofav_id, pcp_favorites toolbar.
#	Removed MODE = 5 for controls.

# Version: 0.23 2014-12-20 GE
#	Minor updates to modprode section.
#	HTML5 format.
#	Added pcp_textarea_inform.

# Version: 0.22 2014-12-08 SBP
#	Added support for the HiFiBerry AMP.

# Version: 0.21 2014-10-22 GE
#	Added new pcp_lmsip and pcp_lms_get.
#	Added pcp_write_to_log and pcp_textarea.
#	Added pcp_html_head.
#	Updated useful buttons.

# Version: 0.20 2014-10-09 SBP
#	Clean up in the I2S section.

# Version: 0.19 2014-10-09 GE
#	Added pcp_uptime_seconds routine.
#	Updated pcp_uptime_minutes routine.

# Version: 0.18 2014-10-08 GE
#	Updated pcp_uptime_minutes routine.

# Version: 0.17 2014-10-04 GE
#	Updated pcp_disable_i2s.
#	Added pcp_mount_mmcblk0p1_nohtml and pcp_umount_mmcblk0p1_nohtml.
#	Added pcp_backup_nohtml.

# Version: 0.16 2014-10-02 GE
#	Added pcp_uptime_minutes routine.
#	Added variable $SERVER_IP_NO_PORT to pcp_auto_start_lms.
#	Updated footer to use style footer.
#	Activated $MODE = 5

# Version: 0.15 2014-09-25 SBP
#	Added support for the HiFiBerry DAC+ and Digi+.
#	Added support for the IQaudIO+ DAC.

# Version: 0.14 2014-09-20 GE
#	Modified HTML to improve cross browser support.

# Version: 0.13 2014-09-09 GE
#	Added pcp_auto_start_lms.
#	Removed $LMSIP using $SERVER_IP instead.

# Version: 0.12 2014-09-08 GE
#	Fixed pcp_controls_mac_address.

# Version: 0.11 2014-09-07 SBP
#	Added support for the DAC+ cards.

# Version: 0.10 2014-09-05 GE
#	Added INSITU_DOWNLOAD variable.

# Version: 0.09 2014-09-04 GE
#	Added timezone routine.
#	Changed size of config.cfg textarea.

# Version: 0.08 2014-08-31 GE
#	Added /bin/sh to first line.

# Version: 0.08 2014-08-26 GE
#	Removed TEST from controls.
#	Fixed TZ/date routine in footer.
#	Renamed init.d file squeezelite_initd to squeezelite.

# Version: 0.07 2014-08-17 SBP
#	Removed backup from pcp_reboot and pcp_shutdown.
#	Added piCorePlayer home as system wide variable.

# Version: 0.06 2014-08-14 GE
#	Added linux release (pcp_linux_release) to pcp_footer.
#	Added pcp_squeezelite_restart, pcp_squeezelite_restart routines.

# Version: 0.05 2014-08-12 GE
#	Added sudo to pcp_squeezelite_version routine.

# Version: 0.04 2014-08-11 SBP
#	Updated $LMSIP to use $SERVER_IP (set in Squeezelite settings).
#	Updated pcp_controls routine.

# Version: 0.03 2014-08-05 GE
#	Updated pcp_controls_mac_address routine to check for $WIFI = "on".

# Version: 0.02 2014-07-18 GE
#	Added routine pcp_config_mac_address, pcp_controls_mac_address, pcp_go_main_button.
#	Updated routine pcp_footer to use pcp_controls_mac_address.
#	Minor indent reformatting.

# Version: 0.01 2014-06-25 GE
#	Original.

#=========================================================================================
# System wide variables
#-----------------------------------------------------------------------------------------
pcp_variables() {
	# The following variables are standard piCorePlayer variables, do not edit!
	CONFIGCFG=/usr/local/sbin/config.cfg
	CONFIGTXT=/mnt/mmcblk0p1/config.txt
	CMDLINETXT=/mnt/mmcblk0p1/cmdline.txt
	BOOTLOCAL=/opt/bootlocal.sh
	BOOTSYNC=/opt/bootsync.sh
	SHUTDOWN=/opt/shutdown.sh
	HTTPDCONF=/home/tc/httpd.conf
	WIFIDB=/home/tc/wifi.db
	VOLUME=/mnt/mmcblk0p1
	DEVICE=/dev/mmcblk0p1
	UPD_PCP=/tmp/upd_picoreplayer
	pCPHOME=/home/tc/www/cgi-bin
	############################################################
	# Steen, Variable names should be UPPERCASE by convention.
	############################################################

	. $pCPHOME/pcp-rpi-functions
	INSITU_DOWNLOAD="http://sourceforge.net/projects/picoreplayer/files/insitu"
	if [ $(pcp_rpi_is_model_2B) = 0 ]; then
		INSITU_DOWNLOAD="http://sourceforge.net/projects/picoreplayer/files/insitu/RPI2"
	fi

	# Set $DEBUG to 1 to display debug information when running scripts (default=0)
	DEBUG=0

	# Set $TEST to 1 to get features that are under test and set to 2 to show old features that might be on its way out (default=0)
	TEST=0

	# Set $MODE to the desired level (1-5) 1=basic -> 5=advanced (default=1) (99=greg only)
	MODE=0

	# Use test download area
	[ $DEBUG = 1 ] && [ $TEST = 1 ] && INSITU_DOWNLOAD="http://sourceforge.net/projects/pcpsl/files/insitu"
}

pcp_variables
. $CONFIGCFG

#=========================================================================================
# ANSI colours
#-----------------------------------------------------------------------------------------
CRE="$(echo -e '\r\033[K')"
RED="$(echo -e '\033[1;31m')"
GREEN="$(echo -e '\033[1;32m')"
YELLOW="$(echo -e '\033[1;33m')"
BLUE="$(echo -e '\033[1;34m')"
MAGENTA="$(echo -e '\033[1;35m')"
CYAN="$(echo -e '\033[1;36m')"
WHITE="$(echo -e '\033[1;37m')"
NORMAL="$(echo -e '\033[0;39m')"

#=========================================================================================
# Test if the internet is accessible.
#-----------------------------------------------------------------------------------------
pcp_internet_accessible() {
	ping -w5 -c3 8.8.8.8 >/dev/null 2>&1
	echo $?
}

pcp_sourceforge_accessible() {
	wget -s http://sourceforge.net/projects/picoreplayer/files/ >/dev/null 2>&1
	echo $?
}

#=========================================================================================
# Update the Timezone routine
#
# Called from:
#			timezone.cgi
#			do_rebootstuff.sh
#-----------------------------------------------------------------------------------------
pcp_set_timezone() {
	[ -f /etc/sysconfig/timezone ] && sudo rm -f /etc/sysconfig/timezone
	TIMEZONE=`sudo /usr/local/sbin/httpd -d $TIMEZONE`
	echo "TZ="$TIMEZONE > /etc/sysconfig/timezone
	sudo chown root:root /etc/sysconfig/timezone
	sudo chmod 644 /etc/sysconfig/timezone
	unset TZ
	export TZ=$TIMEZONE
}

#=========================================================================================
# The MAC addresses used by this piCorePlayer can be:
#	1. An arbitrarily assigned MAC address via Squeezelite software (in config.cfg)
#	2. The MAC address of the wireless card (if installed)
#	3. The physical MAC address of ethernet card (Raspberry Pi Model B)
#		PLAYER_MAC=${MAC_ADDRESS:-$(pcp_eth0_mac_address)}
#-----------------------------------------------------------------------------------------
pcp_config_mac_address() {
	echo $MAC_ADDRESS
}

pcp_wlan0_mac_address() {
	# The wireless MAC address (if installed)
	ifconfig wlan0 2>&1 | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}' | tr '[A-Z]' '[a-z]'
}

pcp_eth0_mac_address() {
	# The physical MAC address of Raspberry Pi Model B
	ifconfig eth0 2>&1 | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}' | tr '[A-Z]' '[a-z]'
}

pcp_controls_mac_address() {
	ifconfig eth0 2>&1 | grep inet &> /dev/null
	eth0_IP=$?
	ifconfig wlan0 2>&1 | grep inet &> /dev/null
	wlan0_IP=$?
	PLAYER_MAC=$(pcp_eth0_mac_address)
	if [ $WIFI = "on" ]; then
		if [ $wlan0_IP = 0 ]; then
			PLAYER_MAC=$(pcp_wlan0_mac_address)
		fi
		if [ $eth0_IP = 0 ]; then
			PLAYER_MAC=$(pcp_eth0_mac_address)
		fi
	fi
	if [ $(pcp_config_mac_address) ]; then
		PLAYER_MAC=$(pcp_config_mac_address)
	fi
	echo $PLAYER_MAC
}

#=========================================================================================
# Banner, navigation, footer and controls html
#-----------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------
# $1 = title, $2 = author, $3 = seconds, $4 = url
#-----------------------------------------------------------------------------------------
pcp_html_head() {
	echo 'Content-Type: text/html'
	echo ''
	echo '<!DOCTYPE html>'
	echo '<!-- Start of pcp_html_head -->'
	echo '<html>'
	echo '<head>'
	echo '  <meta charset="UTF-8">'
	echo '  <meta http-equiv="Cache-Control" content="no-cache">'
	echo '  <meta http-equiv="Pragma" content="no-cache">'
	echo '  <meta http-equiv="Expires" content="0">'
	if [ $DEBUG = 0 ]; then
		if [ x"" != x"$3" ] && [ x"" != x"$4" ]; then
			echo '  <meta http-equiv="Refresh" content="'$3'; url='$4'">'
		fi
	fi
	echo '  <title>pCP - '$1'</title>'
	echo '  <meta name="author" content="'$2'">'
	echo '  <meta name="description" content="'$1'">'
	echo '  <link rel="stylesheet" type="text/css" href="../css/piCorePlayer.css">'
	echo '  <script src="../js/piCorePlayer.js"></script>'
	echo '</head>'
	echo ''
	echo '<body>'
	echo '<!-- End of pcp_html_head -->'
}

pcp_banner() {
	echo '<!-- Start of pcp_banner -->'
	echo '<table class="bgblack">'
	echo '  <tr>'
	echo '    <td height="148">'
	echo '      <p class="banner"><img src="../images/banner.png" alt="piCorePlayer" /></p>'
	echo '    </td>'
	echo '  </tr>'
	echo '</table>'
	echo '<!-- End of pcp_banner -->'
}

pcp_navigation() {
	echo '<!-- Start of pcp_navigation -->'
	echo '<table class="bgblack">'
	echo '  <tr>'
	echo '    <td>'
	echo '      <p>'
	echo '        <a class="nav" href="main.cgi" title="pCP - Main Page">Main Page</a>'
	echo '        <a class="nav" href="squeezelite.cgi" title="pCP - Squeezelite Settings">Squeezelite Settings</a>'
	echo '        <a class="nav" href="wifi.cgi" title="pCP - WIFI Settings">WIFI Settings</a>'
	echo '        <a class="nav" href="tweaks.cgi" title="pCP - Tweaks">Tweaks</a>'
	echo '        <a class="nav" href="about.cgi" title="pCP - About">About</a>'
	echo '      </p>'
	echo '    </td>'
	echo '  </tr>'
	echo '</table>'
	echo '<!-- End of pcp_navigation -->'
}

pcp_footer() {
	if [ -f /etc/sysconfig/timezone ]; then 
		. /etc/sysconfig/timezone
		TIMESTAMP=$(TZ=$TZ date)
	else
		TIMESTAMP="No Timezone"
	fi

	[ $(pcp_squeezelite_status) = 0 ] && STYLE="ok" || STYLE="error"
	SQUEEZELITE='<span class="'$STYLE'"> Squeezelite v'$(pcp_squeezelite_version)'</span>'

	echo '<!-- Start of pcp_footer -->'
	echo '<table class="bgblack">'
	echo '  <tr>'
	echo '    <td>'
	echo '      <p class="footer">
					'$NAME' |
					'$(pcp_controls_mac_address)' | 
					piCorePlayer v'$(pcp_picoreplayer_version)' | 
					linux '$(pcp_linux_release)' | 
					piCore v'$(pcp_picore_version)' | 
					'`echo $SQUEEZELITE`' | 
					'`echo $TIMESTAMP`'</p>'
	echo '    </td>'
	echo '  </tr>'
	echo '</table>'
	echo '<!-- End of pcp_footer -->'
}

pcp_copyright() {
	echo '<!-- Start of pcp_copyright -->'
	echo '<table class="bgwhite">'
	echo '  <tr>'
	echo '    <td class="column150">'
	echo '    </td>'
	echo '    <td>'
	echo '      <p class="copyright">The Software is provided "as is" without warranty of any kind, either express or implied,'
	echo '         including without limitation any implied warranties of condition, uninterrupted use,'
	echo '         merchantability, fitness for a particular purpose, or non-infringement.</p>'
	echo '    </td>'
	echo '    <td class="column150">'
	echo '    </td>'
	echo '  </tr>'
	echo '</table>'
	echo '<!-- End of pcp_copyright -->'
}

pcp_favorites() {
	if [ x"" != x"$SERVER_IP" ] && [ $MODE = 99 ]; then
		##############################################
		# Note: Function pcp_lmsip still being tested
		##############################################
		FAVLIST=`( echo "$(pcp_controls_mac_address) favorites items 0 100"; echo "exit" ) | nc $(pcp_lmsip) 9090 | sed 's/ /\+/g'`
		FAVLIST=`sudo /usr/local/sbin/httpd -d $FAVLIST`

		echo '<!-- Start of pcp_favorites -->'
		echo '<table class="bgblack">'
		echo '  <tr>'
		echo '    <td>'
		echo '      <p>'

		echo $FAVLIST | awk '
		BEGIN {
			RS="id:"
			FS=":"
			i = 0
		}
		#main
		{
			i++
			split($1,a," ")
			id[i]=a[1]
			split(id[i],b,".")
			num[i]=b[2]
			name[i]=$2
			gsub(" type","",name[i])
			hasitems[i]=$5
			gsub("count","",hasitems[i])
			if ( hasitems[i] != "0 " ) {
				i--
			}
		}
		END {
			for (j=1; j<=7; j++) {
				printf "        <a class=\"nav2\" href=\"favorites.cgi?STARTFAV=%s\" title=\"%s\">%s</a>\n",id[j],id[j],name[j]
			}
		} '

		echo '      </p>'
		echo '    </td>'
		echo '  </tr>'
		echo '</table>'
		echo '<!-- End of pcp_favorites -->'
	fi
}

pcp_diagnostics() {
	echo '<!-- Start of diagnostics -->'
	echo '<table class="bgblack">'
	echo '  <tr>'
	echo '    <td>'
	echo '      <p>'
	echo '        <a class="nav" href="diagnostics.cgi" title="pCP - Diagnostics">Diagnostics</a>'
	echo '        <a class="nav" href="diag_rpi.cgi" title="pCP - Raspberry Pi">Raspberry Pi</a>'
	echo '        <a class="nav" href="diag_boot.cgi" title="pCP - Boot">Boot</a>'
	echo '        <a class="nav" href="diag_snd.cgi" title="pCP - Sound">Sound</a>'
	echo '        <a class="nav" href="debug.cgi" title="pCP - Debug">Debug</a>'
	echo '      </p>'
	echo '    </td>'
	echo '  </tr>'
	echo '</table>'
	echo '<!-- End of diagnostics -->'
}

#=========================================================================================
# Versions
#-----------------------------------------------------------------------------------------
pcp_picore_version() {
	echo `version`
}

pcp_picoreplayer_version() {
	. /usr/local/sbin/piversion.cfg
	echo $PIVERS | awk '{ print $2 }'
}

pcp_squeezelite_version() {
	sudo /mnt/mmcblk0p2/tce/squeezelite-armv6hf -t | awk '/^Squeezelite/ { print $2 }' | sed s/v// | sed s/,//
}

pcp_which_squeezelite() {
	sudo /mnt/mmcblk0p2/tce/squeezelite-armv6hf -? | grep "Build options" | grep FFMPEG > /dev/null
	[ $? = 0 ] && echo "Ralphy" || echo "Triode"
}

pcp_linux_release() {
	uname -r
}

#=========================================================================================
# Tiny Core user (tc)
#-----------------------------------------------------------------------------------------
pcp_tc_user() {
	cat /etc/sysconfig/tcuser
}

#=========================================================================================
# Show various configuration and setup files
# $1 = title, $2 = command, $3 = height, $4 = write to log
#-----------------------------------------------------------------------------------------
pcp_textarea() {
	[ "$1" == "" ] && TITLE="$2" || TITLE="$1"
	[ "$TITLE" == "none" ] || echo '<h1>[ INFO ] '$TITLE'</h1>'
	echo '<textarea style="height:'$3'px">'
	echo $START
	$2
	echo $END
	echo '</textarea>'
	[ "$4" = "log" ] && pcp_write_to_log "$TITLE" "$2"
}

pcp_textarea_inform() {
	[ "$1" == "" ] && TITLE="$2" || TITLE="$1"
	[ "$TITLE" == "none" ] || echo '<h1>[ INFO ] '$TITLE'</h1>'
	echo '<textarea class="inform" style="height:'$3'px">'
	$2
	echo '</textarea>'
}

pcp_write_to_log() {
	# TODO Check if $LOG has been set.
	echo ====================================================================================== >> $LOG
	echo "$TITLE" >> $LOG
	echo -------------------------------------------------------------------------------------- >> $LOG
	$2 >> $LOG
	echo ====================================================================================== >> $LOG
	echo >> $LOG
}

pcp_show_config_cfg() {
	echo '<h1>[ INFO ] Current config.cfg</h1>'
	echo '<textarea name="TextBox" rows="26">'
	cat $CONFIGCFG
	echo '</textarea>'
}

pcp_show_config_txt() {
	echo '<h1>[ INFO ] Current config.txt</h1>'
	echo '<textarea name="TextBox" rows="15">'
	cat $CONFIGTXT
	echo '</textarea>'
}	

pcp_show_cmdline_txt() {
	echo '<h1>[ INFO ] Current cmdline.txt</h1>'
	echo '<textarea name="myTextBox" rows="5">'
	cat $CMDLINETXT
	echo '</textarea>'
}

pcp_show_bootlocal_sh() {
	echo '<h1>[ INFO ] Current bootlocal.sh</h1>'
	echo '<textarea name="TextBox" rows="15">'
	cat $BOOTLOCAL
	echo '</textarea>'
}

pcp_show_bootsync_sh() {
	echo '<h1>[ INFO ] Current bootsync.sh</h1>'
	echo '<textarea name="TextBox" rows="8">'
	cat $BOOTSYNC
	echo '</textarea>'
}

#=========================================================================================
# Busybox httpd
#-----------------------------------------------------------------------------------------	
pcp_httpd_query_string() {
	# Process the $QUERY_STRING from httpd
	eval $(echo "$QUERY_STRING" | awk -F'&' '{ for(i=1;i<=NF;i++) { print $i} }')
	[ $DEBUG = 1 ] && echo '<p class="debug">[ DEBUG ] $QUERY_STRING: '$QUERY_STRING'</p>'
}

#=========================================================================================
# Start/stop Squeezelite
#-----------------------------------------------------------------------------------------
pcp_squeezelite_start() {
	echo '<p class="info">[ INFO ] '
	sudo /usr/local/etc/init.d/squeezelite start
	echo '</p>'
}

pcp_squeezelite_stop() {
	echo '<p class="info">[ INFO ] '
	sudo /usr/local/etc/init.d/squeezelite stop
	echo '</p>'
}

pcp_squeezelite_restart() {
	echo '<p class="info">[ INFO ] '
	sudo /usr/local/etc/init.d/squeezelite restart
	echo '</p>'
}

pcp_squeezelite_status() {
	sudo /usr/local/etc/init.d/squeezelite status > /dev/null 2>&1
	echo $?
}

#=========================================================================================
# Determine the system uptime in seconds or minutes
#-----------------------------------------------------------------------------------------
pcp_uptime_seconds() {
	printf "%.0f\n" $(cat /proc/uptime | awk '{ print $1 }')
}

pcp_uptime_minutes() {
	printf "%.0f\n" $(cat /proc/uptime | awk '{ print $1/60 }')
}

#=========================================================================================
# Determine the IP addresses
#-----------------------------------------------------------------------------------------
##############################################
# Note: Function pcp_lmsip still being tested
##############################################
pcp_lmsip() {
	netstat -nt 2>&1 | grep :3483 | grep ESTABLISHED | uniq -f 4 | awk '{ print $5 }' | awk -F: '{ print $1 }'
}

pcp_eth0_ip() {
	ifconfig eth0 | grep inet | awk '{ print $2 }' | awk -F: ' { print $2 }'
}

pcp_wlan0_ip() {
	ifconfig wlan0 | grep inet | awk '{ print $2 }' | awk -F: ' { print $2 }'
}

#=========================================================================================
# Auto start LMS routine
#	This routine will allow you to set a LMS command to auto start a LMS command after
#	a "hard power on". This will be handy for people building pseudo radios. This routine
#	is called from do_rebootstuff.sh.
# 
# Example $AUTOSTARTLMS:
#	randomplay tracks
#	playlist play http://opml.radiotime.com/Tune.ashx?id=s99312&formats=aac,ogg,mp3&partnerId=16&serial=05edb36d50ac02d1d1eeaa23a487968a
#	playlist play http://stream-tx1.radioparadise.com/aac-32
#	playlist play http://radioparadise.com/m3u/aac-128.m3u
#-----------------------------------------------------------------------------------------
pcp_auto_start_lms() {
	if [ x"" != x"$SERVER_IP" ] && [ x"" != x"$AUTOSTARTLMS" ] && [ "$A_S_LMS" == "Enabled" ]; then
		PLAYER_MAC=$(pcp_controls_mac_address)
		SERVER_IP_NO_PORT=`echo $SERVER_IP | awk -F: '{ print $1 }'`
		# Decode variables using httpd, no quotes
		AUTOSTARTLMS=`sudo /usr/local/sbin/httpd -d $AUTOSTARTLMS`
		for i in 1 2 3 4 5
		do
			RESULT=`( echo "$PLAYER_MAC connected ?"; echo exit ) | nc $SERVER_IP_NO_PORT 9090 | awk '{ print $3 }'`
			if [ $RESULT = 1 ]; then
				echo "$i. Connected..." >> /tmp/auto_start_lms.log
				(echo "$PLAYER_MAC $AUTOSTARTLMS"; echo "exit") | nc $SERVER_IP_NO_PORT 9090 >> /tmp/auto_start_lms.log
				break
			fi
			echo "$i. Not connected..." >> /tmp/auto_start_lms.log
			sleep 1
		done
	fi
}

pcp_autofav_id() {
	# Decode variable using httpd, no quotes
	AUTOSTARTFAV=`sudo /usr/local/sbin/httpd -d $AUTOSTARTFAV`
	FAVLIST=`( echo "$(pcp_controls_mac_address) favorites items 0 100"; echo "exit" ) | nc $(pcp_lmsip) 9090 | sed 's/ /\+/g'`
	# Decode variable using httpd, no quotes
	FAVLIST=`sudo /usr/local/sbin/httpd -d $FAVLIST`

	echo $FAVLIST | awk -v autostartfav="$AUTOSTARTFAV" '
	BEGIN {
		RS="id:"
		FS=":"
		i = 0
	}
	# main
	{
		i++
		split($1,a," ")
		id[i]=a[1]
		name[i]=$2
		gsub(" type","",name[i])
		if ( name[i] == autostartfav ) {
			result=id[i]
		}
		hasitems[i]=$5
		gsub("count","",hasitems[i])
		if ( hasitems[i] != "0 " ) {
			i--
		}
	}
	END {
		printf "%s",result
	} '
}

pcp_auto_start_fav() {
	if [ x"" != x"$SERVER_IP" ] && [ x"" != x"$AUTOSTARTFAV" ] && [ "$A_S_FAV" == "Enabled" ]; then
		PLAYER_MAC=$(pcp_controls_mac_address)
		SERVER_IP_NO_PORT=`echo $SERVER_IP | awk -F: '{ print $1 }'`
		for i in 1 2 3 4 5
		do
			RESULT=`( echo "$PLAYER_MAC connected ?"; echo exit ) | nc $SERVER_IP_NO_PORT 9090 | awk '{ print $3 }'`
			if [ $RESULT = 1 ]; then
				echo "$i. Connected..." >> /tmp/auto_start_fav.log
				(echo "$PLAYER_MAC favorites playlist play item_id:$(pcp_autofav_id)"; echo "exit") | nc $SERVER_IP_NO_PORT 9090 >> /tmp/auto_start_fav.log
				break
			fi
			echo "$i. Not connected..." >> /tmp/auto_start_fav.log
			sleep 1
		done
	fi
}

pcp_start_fav() {
	if [ x"" != x"$SERVER_IP" ]; then
		PLAYER_MAC=$(pcp_controls_mac_address)
		SERVER_IP_NO_PORT=`echo $SERVER_IP | awk -F: '{ print $1 }'`
		for i in 1 2 3 4 5
		do
			if [ $(pcp_lms_connected) = 1 ]; then
				echo "$i. Connected..." >> /tmp/auto_start_fav.log
				(echo "$PLAYER_MAC favorites playlist play item_id:$1"; echo "exit") | nc $SERVER_IP_NO_PORT 9090 >> /tmp/auto_start_fav.log
				break
			fi
			echo "$i. Not connected..." >> /tmp/auto_start_fav.log
		done
	fi
}

pcp_user_commands() {
	if [ x"" != x"$USER_COMMAND_1" ]; then
		USER_COMMAND_1=`sudo /usr/local/sbin/httpd -d $USER_COMMAND_1`
		eval "$USER_COMMAND_1"
	fi
	if [ x"" != x"$USER_COMMAND_2" ]; then
		USER_COMMAND_2=`sudo /usr/local/sbin/httpd -d $USER_COMMAND_2`
		eval "$USER_COMMAND_2"
	fi
	if [ x"" != x"$USER_COMMAND_3" ]; then
		USER_COMMAND_3=`sudo /usr/local/sbin/httpd -d $USER_COMMAND_3`
		eval "$USER_COMMAND_3"
	fi
}

#=========================================================================================
# Useful buttons
#-----------------------------------------------------------------------------------------
pcp_go_main_button() {
	echo '<!-- Start of pcp_go_main_button -->'
	echo '<form name="Main" action="main.cgi" method="get" id="Main">'
	echo '<p><input class="large12" type="submit" class="large" value="Go to Main Page" />&nbsp;&nbsp;Go to Main Page</form></p>'
	echo '<!-- End of pcp_go_main_button -->'
}

pcp_go_back_button() {
	echo '<!-- Start of pcp_go_back_button -->'
	echo '<p><input type="button" value="Go Back" onclick="javascript:location.href=document.referrer;" />&nbsp;&nbsp;Go back to previous page</p>'
	echo '<!-- End of pcp_go_back_button -->'
}

pcp_refresh_button() {
	echo '<!-- Start of pcp_refresh_button -->'
	echo '<p><input type="button" value="Refresh" onClick="window.location.reload()" />&nbsp;&nbsp;Refresh this page</p>'
	echo '<!-- End of pcp_refresh_button -->'
}

pcp_reboot_button() {
	echo '<!-- Start of pcp_reboot_button -->'
	echo '<p><input type="button" value="Reboot" onClick="javascript:pcp_confirm('\''Reboot piCorePlayer?'\'','\''reboot.cgi'\'')" />&nbsp;&nbsp;Reboot piCorePlayer</p>'
	echo '<!-- End of pcp_reboot_button -->'
}

#=========================================================================================
# Backup mydata
#-----------------------------------------------------------------------------------------
pcp_backup() {
	# Delete any previous backup_done file
	[ -e /tmp/backup_done ] && sudo rm -f /tmp/backup_done

	# Do a backup - filetool.sh backs up files in .filetool.lst
	echo '<p class="info">[ INFO ] '
	sudo filetool.sh -b
	sync
	echo '</p>'

	# If backup_status file exists and is non-zero in size then an error has occurred
	if [ -s /tmp/backup_status ]; then
		echo '<p class="error">[ ERROR ] Backup status</p>'
		echo '<pre>'
		cat /tmp/backup_status
		echo '</pre>'
	fi

	# If backup_done exists then the backup was successful
	if [ -f /tmp/backup_done ]; then
		echo '<p class="ok">[ OK ] Backup successful.</p>'
	else
		echo '<p class="error">[ ERROR ] Backup failed.</p>'
	fi
}

pcp_backup_nohtml() {
	# Delete any previous backup_done file
	[ -e /tmp/backup_done ] && sudo rm -f /tmp/backup_done

	# Do a backup - filetool.sh backs up files in .filetool.lst
	echo -n "[ INFO ] "
	sudo filetool.sh -b
	sync

	# If backup_status file exists and is non-zero in size then an error has occurred
	if [ -s /tmp/backup_status ]; then
		echo '[ ERROR ] Backup status.'
		cat /tmp/backup_status
	fi

	# If backup_done exists then the backup was successful
	if [ -f /tmp/backup_done ]; then
		echo '[ OK ] Backup successful.'
	else
		echo '[ ERROR ] Backup failed.'
	fi
}

#=========================================================================================
# Display which script is running
#-----------------------------------------------------------------------------------------
pcp_running_script() {
	[ $DEBUG = 1 ] && echo '<p class="debug">[ DEBUG ] Running '$0'...</p>'
}

#=========================================================================================
# Mounting/unmounting devices
#-----------------------------------------------------------------------------------------
pcp_mount_mmcblk0p1() {
	# Check if mmcblk0p1 is mounted otherwise mount it
	if mount | grep $VOLUME; then
		echo '<p class="error">[ ERROR ] '$VOLUME' already mounted</p>'
	else
		echo '<p class="info">[ INFO ] Mounting '$VOLUME'...</p>'
		echo '<p style="font-size:10px">'
		sudo mount $DEVICE;
	fi
}

pcp_umount_mmcblk0p1() {
	# Unmount mmcblk0p1
	sync
	sync
	echo '<p class="info">[ INFO ] Unmounting '$VOLUME'...</p>'
	sudo umount $DEVICE
}

pcp_mount_mmcblk0p1_nohtml() {
	# Check if mmcblk0p1 is mounted otherwise mount it
	if mount | grep $VOLUME; then
		echo '[ ERROR ] '$VOLUME' already mounted'
	else
		echo '[ INFO ] Mounting '$VOLUME'...'
		sudo mount $DEVICE;
	fi
}

pcp_umount_mmcblk0p1_nohtml() {
	# Unmount mmcblk0p1
	sync
	sync
	echo '[ INFO ] Unmounting '$VOLUME'...'
	sudo umount $DEVICE
}

	VOLUME=/mnt/mmcblk0p1
	DEVICE=/dev/mmcblk0p1

pcp_mount_device() {
	# Check if device is mounted otherwise mount it
	if mount | grep "/mnt/$1"; then
		echo '<p class="error">[ ERROR ] /mnt/'$1' already mounted</p>'
	else
		echo '<p class="info">[ INFO ] Mounting /dev/'$1'...</p>'
		echo '<p style="font-size:10px">'
		sudo mount /dev/$1;
	fi
}

pcp_umount_device() {
	# Unmount device
	sync
	sync
	echo '<p class="info">[ INFO ] Unmounting /dev/'$1'...</p>'
	sudo umount /dev/$1
}

#=========================================================================================
# Reboot/shutdown piCorePlayer
#-----------------------------------------------------------------------------------------
pcp_reboot() {
	echo '<p class="info">[ INFO ] piCorePlayer is rebooting...</p>'
	sudo reboot
}

pcp_shutdown() {
	echo '<p class="info">[ INFO ] piCorePlayer is shutting down...</p>'
	exitcheck.sh
}

#=========================================================================================
# Save parameters to the config file - add double quotes
#
# Note: Please maintain both pcp_save_to_config AND pcp_reset_config_to_defaults.
#-----------------------------------------------------------------------------------------
pcp_save_to_config() {
	sudo sed -i "s/\(NAME=\).*/\1\"$NAME\"/" $CONFIGCFG
	sudo sed -i "s/\(OUTPUT=\).*/\1\"$OUTPUT\"/" $CONFIGCFG
	sudo sed -i "s/\(ALSA_PARAMS=\).*/\1\"$ALSA_PARAMS\"/" $CONFIGCFG
	sudo sed -i "s/\(BUFFER_SIZE=\).*/\1\"$BUFFER_SIZE\"/" $CONFIGCFG
	sudo sed -i "s/\(_CODEC=\).*/\1\"$_CODEC\"/" $CONFIGCFG
	sudo sed -i "s/\(PRIORITY=\).*/\1\"$PRIORITY\"/" $CONFIGCFG
	sudo sed -i "s/\(MAX_RATE=\).*/\1\"$MAX_RATE\"/" $CONFIGCFG
	sudo sed -i "s/\(UPSAMPLE=\).*/\1\"$UPSAMPLE\"/" $CONFIGCFG
	sudo sed -i "s/\(MAC_ADDRESS=\).*/\1\"$MAC_ADDRESS\"/" $CONFIGCFG
	sudo sed -i "s/\(SERVER_IP=\).*/\1\"$SERVER_IP\"/" $CONFIGCFG
	sudo sed -i "s/\(LOGLEVEL=\).*/\1\"$LOGLEVEL\"/" $CONFIGCFG
	sudo sed -i "s/\(LOGFILE=\).*/\1\"$LOGFILE\"/" $CONFIGCFG
	sudo sed -i "s/\(DSDOUT=\).*/\1\"$DSDOUT\"/" $CONFIGCFG
	sudo sed -i "s/\(VISULIZER=\).*/\1\"$VISULIZER\"/" $CONFIGCFG
	sudo sed -i "s/\(CLOSEOUT=\).*/\1\"$CLOSEOUT\"/" $CONFIGCFG
	sudo sed -i "s/\(OTHER=\).*/\1\"$OTHER\"/" $CONFIGCFG
	sudo sed -i "s/\(AUDIO=\).*/\1\"$AUDIO\"/" $CONFIGCFG
	sudo sed -i "s/\(HOST=\).*/\1\"$HOST\"/" $CONFIGCFG
	sudo sed -i "s/\(SSID=\).*/\1\"$SSID\"/" $CONFIGCFG
	sudo sed -i "s/\(PASSWORD=\).*/\1\"$PASSWORD\"/" $CONFIGCFG
	sudo sed -i "s/\(ENCRYPTION=\).*/\1\"$ENCRYPTION\"/" $CONFIGCFG
	sudo sed -i "s/\(OVERCLOCK=\).*/\1\"$OVERCLOCK\"/" $CONFIGCFG
	sudo sed -i "s/\(CMD=\).*/\1\"$CMD\"/" $CONFIGCFG
	sudo sed -i "s/\(WIFI=\).*/\1\"$WIFI\"/" $CONFIGCFG
	sudo sed -i "s/\(FIQ=\).*/\1\"$FIQ\"/" $CONFIGCFG
	sudo sed -i "s/\(ALSAlevelout=\).*/\1\"$ALSAlevelout\"/" $CONFIGCFG
	sudo sed -i "s/\(TIMEZONE=\).*/\1\"$TIMEZONE\"/" $CONFIGCFG
	sudo sed -i "s/\(REBOOT *=*\).*/\1\"$REBOOT\"/" $CONFIGCFG
	sudo sed -i "s/\(RB_H *=*\).*/\1\"$RB_H\"/" $CONFIGCFG
	sudo sed -i "s/\(RB_WD *=*\).*/\1\"$RB_WD\"/" $CONFIGCFG
	sudo sed -i "s/\(RB_DMONTH *=*\).*/\1\"$RB_DMONTH\"/" $CONFIGCFG
	sudo sed -i "s/\(RESTART *=*\).*/\1\"$RESTART\"/" $CONFIGCFG
	sudo sed -i "s/\(RS_H *=*\).*/\1\"$RS_H\"/" $CONFIGCFG
	sudo sed -i "s/\(RS_WD *=*\).*/\1\"$RS_WD\"/" $CONFIGCFG
	sudo sed -i "s/\(RS_DMONTH *=*\).*/\1\"$RS_DMONTH\"/" $CONFIGCFG
	sudo sed -i "s/\(AUTOSTARTLMS=\).*/\1\"$AUTOSTARTLMS\"/" $CONFIGCFG
	sudo sed -i "s/\(A_S_LMS=\).*/\1\"$A_S_LMS\"/" $CONFIGCFG
	sudo sed -i "s/\(AUTOSTARTFAV=\).*/\1\"$AUTOSTARTFAV\"/" $CONFIGCFG
	sudo sed -i "s/\(A_S_FAV=\).*/\1\"$A_S_FAV\"/" $CONFIGCFG
	sudo sed -i "s/\(USER_COMMAND_1=\).*/\1\"$USER_COMMAND_1\"/" $CONFIGCFG
	sudo sed -i "s/\(USER_COMMAND_2=\).*/\1\"$USER_COMMAND_1\"/" $CONFIGCFG
	sudo sed -i "s/\(USER_COMMAND_3=\).*/\1\"$USER_COMMAND_1\"/" $CONFIGCFG
}

#=========================================================================================
# Create a new config.cfg with defaults values.
#
# This routine will add new variables if missing in current config.cfg. The new variables
# will have the default values loaded.
#
# Note: Please maintain both pcp_save_to_config AND pcp_reset_config_to_defaults.
#-----------------------------------------------------------------------------------------
pcp_reset_config_to_defaults() {
cat <<EOF > $CONFIGCFG
NAME="piCorePlayer"
OUTPUT="sysdefault:CARD=ALSA"
ALSA_PARAMS="80:::0"
BUFFER_SIZE=""
_CODEC=""
PRIORITY=""
MAX_RATE=""
UPSAMPLE=""
MAC_ADDRESS=""
SERVER_IP=""
LOGLEVEL=""
LOGFILE=""
DSDOUT=""
VISULIZER=""
OTHER=""
AUDIO="Analog"
HOST="piCorePlayer"
SSID="wireless"
PASSWORD="password"
ENCRYPTION="WPA"
TIMEZONE=""
OVERCLOCK="NONE"
CMD="Default"
WIFI="off"
FIQ="0x7"
ALSAlevelout="Default"
REBOOT="Disabled"
RB_H="0"
RB_WD="0"
RB_DMONTH="0"
RESTART="Disabled"
RS_H="0"
RS_WD="0"
RS_DMONTH="0"
AUTOSTARTLMS=""
A_S_LMS="Disabled"
AUTOSTARTFAV=""
A_S_FAV="Disabled"
USER_COMMAND_1=""
USER_COMMAND_2=""
USER_COMMAND_3=""
EOF
}

#=========================================================================================
# Read which output to use then add/remove modules
#-----------------------------------------------------------------------------------------
pcp_read_chosen_audio() {
	[ $AUDIO = Analog ] &&      pcp_disable_i2s
	[ $AUDIO = USB ] &&         pcp_disable_i2s
	[ $AUDIO = I2SDAC ] &&      pcp_enable_i2s_dac
	[ $AUDIO = I2SDIG ] &&      pcp_enable_i2s_digi
	[ $AUDIO = I2SpDAC ] &&     pcp_enable_hifiberry_dac_p
	[ $AUDIO = I2SpDIG ] &&     pcp_enable_i2s_digi
	[ $AUDIO = I2SpIQaudIO ] && pcp_enable_iqaudio_dac
	[ $AUDIO = IQaudio ] &&     pcp_enable_iqaudio_dac
	[ $AUDIO = I2SAMP ] &&      pcp_enable_i2s_amp
}

#========================================================================================
# Remove HiFiBerry Digi/DAC and IQaudIO DAC modules
#----------------------------------------------------------------------------------------
pcp_disable_i2s() {
	sudo /usr/local/etc/init.d/squeezelite stop
	sleep 1
	sudo modprobe -qr snd_soc_wm8804
	sudo modprobe -qr snd_soc_hifiberry_dac
	sudo modprobe -qr snd_soc_hifiberry_digi
	sudo modprobe -qr snd_soc_iqaudio_dac
}

#========================================================================================
# Load the correct modules for HiFiBerry DAC
#----------------------------------------------------------------------------------------
pcp_enable_i2s_dac() {
	pcp_disable_i2s
	sudo modprobe -q snd_soc_bcm2708_i2s
#	sudo modprobe -q bcm2708_dmaengine
	sudo modprobe -q snd_soc_pcm5102a
	sudo modprobe -q snd_soc_hifiberry_dac
}

#========================================================================================
# Load the correct modules for HiFiBerry Digi and HiFiBerry Digi+
#----------------------------------------------------------------------------------------
pcp_enable_i2s_digi() {
	pcp_disable_i2s
	sudo modprobe -q snd_soc_bcm2708_i2s
#	sudo modprobe -q bcm2708_dmaengine
	sudo modprobe -q snd_soc_wm8804
	sleep 1
	sudo modprobe -q snd_soc_hifiberry_digi
}

#========================================================================================
# Load the correct modules for IQaudIO DAC and IQaudIO DAC+
#----------------------------------------------------------------------------------------
pcp_enable_iqaudio_dac() {
	pcp_disable_i2s
	sudo modprobe -q snd_soc_bcm2708_i2s
#	sudo modprobe -q bcm2708_dmaengine
	sudo modprobe -q snd_soc_pcm512x
	sleep 1
	sudo modprobe -q snd_soc_iqaudio_dac
	sleep 1
}

#========================================================================================
# Load the correct modules for HiFiBerry DAC+
#----------------------------------------------------------------------------------------
pcp_enable_hifiberry_dac_p() {
	pcp_disable_i2s
	sudo modprobe -q snd_soc_pcm512x_i2c 
	sudo modprobe -q snd_soc_pcm512x
	sudo modprobe -q snd_soc_bcm2708_i2s
#	sudo modprobe -q bcm2708_dmaengine
	sudo modprobe -q snd_pcm_dmaengine
	sudo modprobe -q snd_soc_hifiberry_dacplus
}

#========================================================================================
# Load the correct modules for HiFiBerry AMP
#----------------------------------------------------------------------------------------
pcp_enable_i2s_amp() {
	pcp_disable_i2s
	sudo modprobe -q snd_soc_bcm2708_i2s
#	sudo modprobe -q bcm2708_dmaengine
	sudo modprobe -q snd_soc_wm8804
	sleep 1
	sudo modprobe -q snd_soc_hifiberry_amp
}