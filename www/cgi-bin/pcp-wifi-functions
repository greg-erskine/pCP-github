#!/bin/sh

# Version: 4.0.0 2018-04-22

#========================================================================================
# Messages.
#----------------------------------------------------------------------------------------
pcp_message() {
#	$1 = type: OK|INFO|ERROR|DEBUG
#	$2 = message
#	$3 = format: colour|text|html

	MESSAGE=$2
	case $1 in
		OK|ok)
			case $3 in
				col*|COL*) echo "${GREEN}${MESSAGE}${NORMAL}" ;;
				text|TEXT) echo '[ OK ] '${MESSAGE} ;;
				html|HTML) echo '<p class="ok">[ OK ] '${MESSAGE}'</p>' ;;
			esac
		;;
		INFO|info)
			case $3 in
				col*|COL*) echo "${YELLOW}${MESSAGE}${NORMAL}" ;;
				text|TEXT) echo '[ INFO ] '${MESSAGE} ;;
				html|HTML) echo '<p class="info">[ INFO ] '${MESSAGE}'</p>' ;;
			esac
		;;
		ERROR|error)
			case $3 in
				col*|COL*) echo "${RED}${MESSAGE}${NORMAL}" ;;
				text|TEXT) echo '[ ERROR ] '${MESSAGE} ;;
				html|HTML) echo '<p class="error">[ ERROR ] '${MESSAGE}'</p>' ;;
			esac
		;;
		DEBUG|debug)
			case $3 in
				col*|COL*) echo "${ORANGE}${MESSAGE}${NORMAL}" ;;
				text|TEXT) echo '[ DEBUG ] '${MESSAGE} ;;
				html|HTML) echo '<p class="debug">[ DEBUG ] '${MESSAGE}'</p>' ;;
			esac
		;;
	esac
}

pcp_wifi_load_extn() {
	# $1 - extension
	# $2 - description
	# $3 - colour|text|html

	sudo -u tc pcp-load -i $1 >/dev/null 2>&1
	if [ $? -eq 0 ]; then
		pcp_message OK "$2 loaded." "$3"
	else
		pcp_message ERROR "$2 load error." "$3"
	fi
	sudo sed -i '/'$1'/d' $ONBOOTLST
	sudo echo $1 >> $ONBOOTLST
}

#========================================================================================
# Load wifi extensions.
#----------------------------------------------------------------------------------------
pcp_wifi_load_wifi_extns() {
	# $1 - colour|text|html

	pcp_message INFO "Loading wifi extensions..." "$1"

	pcp_wifi_load_extn "wireless_tools.tcz" "Wireless tools" "$1"
	pcp_wifi_load_extn "wpa_supplicant.tcz" "WPA supplicant" "$1"

	pcp_message OK "Done." "$1"
}

#========================================================================================
# Load wifi firmware extensions.
#----------------------------------------------------------------------------------------
pcp_wifi_load_wifi_firmware_extns() {
	# $1 - format: colour|text|html

	pcp_message INFO "Loading wifi firmware extensions..." "$1"

	pcp_wifi_load_extn "firmware-atheros.tcz" "Atheros firmware" "$1"
	pcp_wifi_load_extn "firmware-brcmwifi.tcz" "Broadcom USB firmware" "$1"
	pcp_wifi_load_extn "firmware-ralinkwifi.tcz" "Ralink firmware" "$1"
	pcp_wifi_load_extn "firmware-rtlwifi.tcz" "Realtek firmware" "$1"
	pcp_wifi_load_extn "firmware-rpi3-wireless.tcz" "RPi Broadcom firmware" "$1"

	pcp_message OK "Done." "$1"
}

#========================================================================================
# Read wifi settings from current wpa_supplicant.conf
#----------------------------------------------------------------------------------------
pcp_wifi_read_wpa_supplicant() {
	if [ -f $WPASUPPLICANTCONF ]; then
		pcp_message INFO "Reading from $WPASUPPLICANTCONF..." "$1"

		unset WPA_SSID WPA_PASSWORD WPA_PW WPA_PSK WPA_PASSPHRASE KEY_MGMT WPA_ENCRYPTION WPA_HIDDENSSID

		for i in $(cat $WPASUPPLICANTCONF); do
			case $i in
				*=*)
					case $i in
						ssid=*)
							WPA_SSID=${i#*=}
							WPA_SSID=$(echo $WPA_SSID | sed -e 's/^\"\(.*\)\"$/\1/')
						;;
						psk=\"*)
							WPA_PASSWORD=${i#*=}
							WPA_PASSWORD=$(echo $WPA_PASSWORD | sed -e 's/^\"\(.*\)\"$/\1/')
							WPA_PW=TRUE
						;;
						psk=*)
							WPA_PSK=${i#*=}
							[ $WPA_PW ] || WPA_PASSPHRASE=$WPA_PSK
						;;
						key_mgmt=*)
							KEY_MGMT=${i#*=}
							WPA_ENCRYPTION=WPA-PSK
							[ "$KEY_MGMT" = "NONE" ] && WPA_ENCRYPTION=OPEN
							[ "$KEY_MGMT" = "NONE" ] && [ $WPA_PW ] && WPA_ENCRYPTION=WEP
						;;
						scan_ssid=*)
							WPA_HIDDENSSID=${i#*=}
							[ x"" = x"$WPA_HIDDENSSID" ] && WPA_HIDDENSSID=0
						;;
					esac
			esac
		done
		[ "$WPA_ENCRYPTION" != "WPA-PSK" ] && WPA_PASSPHRASE=""
	else
		pcp_message ERROR "$WPASUPPLICANTCONF not found." "text"
	fi
}

#========================================================================================
# Read wifi settings from newconfig.cfg <=== NOT USED YET. NOT TESTED.
#----------------------------------------------------------------------------------------
pcp_wifi_read_newconfig() {
	unset WPA_SSID WPA_PASSWORD WPA_PW KEY_MGMT WPA_ENCRYPTION

	for i in $(cat $NEWCONFIGCFG); do
		case $i in
			*=*)
				case $i in
					SSID=*)
						WPA_SSID=${i#*=}
						WPA_SSID=$(echo $WPA_SSID | sed -e 's/^\"\(.*\)\"$/\1/')
					;;
					PASSWORD=*)
						WPA_PASSWORD=${i#*=}
						WPA_PASSWORD=$(echo $WPA_PASSWORD | sed -e 's/^\"\(.*\)\"$/\1/')
						WPA_PW=TRUE
					;;
					ENCRYPTION=*)
						KEY_MGMT=${i#*=}
						KEY_MGMT=$(echo $KEY_MGMT | sed -e 's/^\"\(.*\)\"$/\1/')
						[ "$KEY_MGMT" = "WPA" ] && WPA_ENCRYPTION=WPA-PSK
						[ "$KEY_MGMT" = "WEP" ] && WPA_ENCRYPTION=WEP
						[ "$KEY_MGMT" = "NONE" ] && WPA_ENCRYPTION=NONE
					;;
				esac
		esac
	done
}

#========================================================================================
# Write wifi settings to wpa_supplicant.conf file.
#----------------------------------------------------------------------------------------
pcp_wifi_write_wpa_supplicant() {
	pcp_message INFO "Writing to $WPASUPPLICANTCONF..." "$1"

	echo '# Generated by piCorePlayer' > $WPASUPPLICANTCONF
	echo 'ctrl_interface=/var/run/wpa_supplicant' >> $WPASUPPLICANTCONF
	echo 'ctrl_interface_group=staff' >> $WPASUPPLICANTCONF
	echo 'update_config=1' >> $WPASUPPLICANTCONF
	echo '' >> $WPASUPPLICANTCONF
	echo 'network={' >> $WPASUPPLICANTCONF

	echo '	ssid="'$WPA_SSID'"' >> $WPASUPPLICANTCONF
	if [ "$WPA_ENCRYPTION" = "WPA-PSK" ]; then
		if [ x"" = x"$WPA_PASSPHRASE" ]; then
			echo '	psk="'$WPA_PASSWORD'"' >> $WPASUPPLICANTCONF
		else
			echo '	psk='$WPA_PASSPHRASE >> $WPASUPPLICANTCONF
		fi
	fi
	[ "$WPA_ENCRYPTION" = "WEP"     ] && echo '	psk="'$WPA_PASSWORD'"' >> $WPASUPPLICANTCONF
	[ "$WPA_ENCRYPTION" = "WPA-PSK" ] && echo '	key_mgmt=WPA-PSK' >> $WPASUPPLICANTCONF
	[ "$WPA_ENCRYPTION" = "WEP"     ] && echo '	key_mgmt=NONE' >> $WPASUPPLICANTCONF
	[ "$WPA_ENCRYPTION" = "OPEN"    ] && echo '	key_mgmt=NONE' >> $WPASUPPLICANTCONF
	echo '	auth_alg=OPEN' >> $WPASUPPLICANTCONF
	[ $WPA_HIDDENSSID -eq 1 ] && echo '	scan_ssid='$WPA_HIDDENSSID >> $WPASUPPLICANTCONF

	echo '}' >> $WPASUPPLICANTCONF
}

#========================================================================================
# Does wpa_supplicant.conf exist?
#----------------------------------------------------------------------------------------
pcp_exists_wpa_supplicant() {
	[ -f $WPASUPPLICANTCONF ] && echo 0 || echo 1
}

#========================================================================================
# Was wpa_supplicant.conf generated by piCorePlayer?
#----------------------------------------------------------------------------------------
pcp_wifi_generated_by_pcp() {
	RESULT=$(grep "^# Generated by piCorePlayer" $WPASUPPLICANTCONF)
	echo $?
}

#========================================================================================
# Check all wifi extensions are installed.
#----------------------------------------------------------------------------------------
pcp_wifi_extension_installed() {
	# $1 - format: colour|text|html
	# $2 - extension

	if [ $(pcp_extn_is_installed $2) -eq 0 ]; then
		pcp_message OK "$2 installed." "$1"
	else
		pcp_message ERROR "$2 not installed." "$1"
	fi
}

pcp_wifi_all_extensions_installed() {
	EXTN_LIST="wireless_tools wpa_supplicant XXXx
	firmware-atheros firmware-brcmwifi firmware-ralinkwifi firmware-rtlwifi firmware-rpi3-wireless"

	for i in $EXTN_LIST; do
		pcp_wifi_extension_installed "html" $i
	done
}

#========================================================================================
# Generate WPA passphrase from SSID and password.
#----------------------------------------------------------------------------------------
pcp_wifi_generate_passphrase() {
	pcp_debug_variables "text" WPA_PASSWORD WPA_ENCRYPTION WPA_PASSPHRASE

	pcp_message INFO "Generating new passphrase..." "$1"
	if [ "$WPA_PASSWORD" != "" ] && [ "$WPA_ENCRYPTION" = "WPA-PSK" ]; then
		WPA_PASSPHRASE="$(wpa_passphrase $WPA_SSID $WPA_PASSWORD)"
		if [ $? -eq 0 ]; then
			WPA_PASSPHRASE=$(echo $WPA_PASSPHRASE | cut -d = -f 5 | cut -b 1-64)
			WPA_PASSWORD=""
		fi
	else
		if [ "$WPA_PASSPHRASE" = "" ]; then
			WPA_PASSPHRASE="[ ERROR ] Password has not been set."
		fi
	fi

	pcp_debug_variables "text" WPA_PASSWORD WPA_ENCRYPTION WPA_PASSPHRASE
}

#========================================================================================
# (c) Robert Shingledecker 2011-2012 v1.4
# This routine has been based on code from the piCore script wifi.sh
# /usr/local/bin/wifi.sh
#----------------------------------------------------------------------------------------
pcp_wifi_available_networks() {
	unset WIFI2 && CNT=0
	echo -en "Scanning"
	until [ -n "$WIFI2" ]
	do
		[ $((CNT++)) -gt 5 ] && break || sleep 1
		echo -en "."
		WIFI2="$(iwconfig 2>/dev/null | awk '{if (NR==1)print $1}')"
	done
	if [ -z "$WIFI2" ]; then
		echo -en "\n\nNo wifi devices found!\n\n"
		echo -en "Possible error:\n\n"
		echo -en "1. USB wifi adapter missing - insert adapter.\n"
		echo -en "2. wifi drivers and firmware missing - reboot required."
		echo '</textarea>'
		echo '                </td>'
		echo '              </tr>'
		echo '            </table>'
		echo '          </fieldset>'
		echo '        </div>'
#		echo '      </form>'
		echo '    </td>'
		echo '  </tr>'
		echo '</table>'
		pcp_html_end
	fi
	ifconfig "$WIFI2" up 2>/dev/null
	(for i in `seq 5`
	do
		iwlist "$WIFI2" scanning
		[ $? -eq 0 ] && break
		sleep 1
	done ) | awk -v wifi=$WIFI2 '
	BEGIN {
		RS="\n"
		FS=":"
		i = 0
	}
	function rsort(qual,level,sid,enc,chan,freq,type,addr,n,i,j,t) {
		for (i = 2; i <= n; i++)
			for (j = i; j > 1 && qual[j]+0 > qual[j-1]+0; j--) {
				# swap qual[j] and qual[j-1]
				t = qual[j]; qual[j] = qual[j-1]; qual[j-1] = t
				t = level[j]; level[j] = level[j-1]; level[j-1] = t
				t = sid[j];  sid[j]  = sid[j-1];  sid[j-1]  = t
				t = enc[j];  enc[j]  = enc[j-1];  enc[j-1]  = t
				t = chan[j]; chan[j] = chan[j-1]; chan[j-1] = t
				t = freq[j]; freq[j] = freq[j-1]; freq[j-1] = t
				t = type[j]; type[j] = type[j-1]; type[j-1] = t
				t = addr[j]; addr[j] = addr[j-1]; addr[j-1] = t
			}
	}
	# main ()
	{
		if ($1 ~ /Cell/) {
			if ( i == 0 || sid[i] != "" ) i++
			addr[i] = $2":"$3":"$4":"$5":"$6":"$7
			gsub(" ","",addr[i])
		}
		if ($1 ~ /Frequency/) {
			split($2,c," ")
			chan[i] = c[4]
			gsub("\)","",chan[i])
			freq[i] = "("c[1]c[2]")"
			gsub(" ","",freq[i])
		}
		if ($1 ~ /Quality/) {
			if (index($1,"=")) {
				split($1,c,"=")
				q = c[2]
				level[i] = c[3]
				gsub(" ","",level[i])
			}
			split(q,c,"/")
			qual[i] = c[1] * 100 / c[2]
		}
		if ($1 ~ /Encryption/) {
			enc[i] = $2
		}
		if ($1 ~ /ESSID/) {
			sid[i] = $2
			gsub("\"","",sid[i])
		}
		if (enc[i] ~ /off/) type[i]="NONE"
		if ($2 ~ /WPA/) type[i]="WPA"
		if ($2 ~ /WPA2 /) type[i]="WPA2"
		if (type[i] == "" ) type[i]="WEP"
	}
	END {
		rsort(qual,level,sid,enc,chan,freq,type,addr,NR)
		print ""
		print "---------------------------------------------------------------------------------------------"
		print "       SSID                 Quality   Level       Channel      Encryption       Address"
		print "---------------------------------------------------------------------------------------------"
		for (l=1; l<15; l++) {
			++j
			#                     |NO. |SSID |Qual  |Level |Channel   |Encrypt   |Address
			if ( j <= i ) printf "%2d. %-25s %3d    %7s    %2d %10s   %-3s %-4s  %18s\n", j, sid[j], qual[j], level[j], chan[j], freq[j], enc[j], type[j], addr[j]
		}
		print "---------------------------------------------------------------------------------------------"
	} '
}
#----------------------------------------------------------------------------------------

#========================================================================================
# wifi extensions and dependencies.
#----------------------------------------------------------------------------------------
#cat piCorePlayer.dep
# pcp.tcz
# firmware-atheros.tcz
# firmware-brcmwifi.tcz
# firmware-rpi3-wireless.tcz
# firmware-ralinkwifi.tcz
# firmware-rtlwifi.tcz
# wifi.tcz
#
# piCorePlayer.dep
# |
# |--pcp.tcz.dep
# |   |
# |   |--pcp-base.tcz
# |   |--alsa.tcz.dep
# |   |   |
# |   |   \--libasound.tcz.dep
# |   |       |
# |   |       \alsa-modules-KERNEL.tcz.
# |   |
# |   |--alsa-utils.tcz.dep
# |   |   |
# |   |   |--libasound.tcz->
# |   |   \--ncurses.tcz.
# |   |
# |   |--busybox-httpd.tcz
# |   |--openssh.tcz.dep
# |   |   |
# |   |   |--libedit.tcz.dep
# |   |   |   |
# |   |   |   \--ncurses.tcz.
# |   |   |
# |   |   \--openssl.tcz.dep
# |   |       |
# |   |       \--ca-certificates.tcz.
# |   |
# |   |--dialog.tcz.dep
# |   |   |
# |   |   \--ncurses.tcz.
# |   |
# |   \--pcp-squeezelite.tcz.dep
# |       |
# |       |--pcp-libmpg123.tcz.dep
# |       |   |
# |       |   \--libasound.tcz.dep
# |       |       |
# |       |       \--alsa-modules-KERNEL.tcz.
# |       |
# |       |--pcp-libfaad2.tcz
# |       |--pcp-libsoxr.tcz
# |       |--pcp-libmad.tcz
# |       |--pcp-libvorbis.tcz
# |       |   |
# |       |   \--pcp-libogg.tcz.
# |       |
# |       |--pcp-libflac.tcz
# |       |   |
# |       |   \--pcp-libogg.tcz.
# |       |
# |       |--libasound.tcz
# |       |   |
# |       |   \--alsa-modules-KERNEL.tcz.
# |       |
# |       \--wiringpi.tcz.
# |
# |--firmware-atheros.tcz
# |--firmware-brcmwifi.tcz
# |--firmware-ralinkwifi.tcz
# |--firmware-rtlwifi.tcz
# |--firmware-rpi3-wireless.tcz
# |
# \--wifi.tcz.dep
#     |
#     |--wireless_tools.tcz.dep
#     |   |
#     |   |--libiw.tcz
#     |   \--wireless-KERNEL.tcz
#     |
#     \--wpa_supplicant.tcz.dep
#         |
#         |--libnl.tcz
#         |--openssl.tcz.dep
#         |   |
#         |   \--ca-certificates.tcz.
#         |
#         \--readline.tcz
#             |
#             \--ncurses.tcz.
