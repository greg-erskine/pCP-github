#!/bin/sh

# Version: 4.0.0 2018-04-21

#========================================================================================
# Read wifi settings from current wpa_supplicant.conf
#----------------------------------------------------------------------------------------
pcp_wifi_read_wpa_supplicant() {
	unset WPA_SSID WPA_PASSWORD WPA_PW WPA_PSK WPA_PASSPHRASE KEY_MGMT WPA_ENCRYPTION WPA_HIDDENSSID

	for i in $(cat $WPASUPPLICANTCONF); do
		case $i in
			*=*)
				case $i in
					ssid=*)
						WPA_SSID=${i#*=}
						WPA_SSID=$(echo $WPA_SSID | sed -e 's/^\"\(.*\)\"$/\1/')
					;;
					psk=\"*)
						WPA_PASSWORD=${i#*=}
						WPA_PASSWORD=$(echo $WPA_PASSWORD | sed -e 's/^\"\(.*\)\"$/\1/')
						WPA_PW=TRUE
					;;
					psk=*)
						WPA_PSK=${i#*=}
						[ $WPA_PW ] || WPA_PASSPHRASE=$WPA_PSK
					;;
					key_mgmt=*)
						KEY_MGMT=${i#*=}
						WPA_ENCRYPTION=WPA-PSK
						[ "$KEY_MGMT" = "NONE" ] && WPA_ENCRYPTION=OPEN
						[ "$KEY_MGMT" = "NONE" ] && [ $WPA_PW ] && WPA_ENCRYPTION=WEP
					;;
					scan_ssid=*)
						WPA_HIDDENSSID=${i#*=}
						[ x"" = x"$WPA_HIDDENSSID" ] && WPA_HIDDENSSID=0
					;;
				esac
		esac
	done

[ "$WPA_ENCRYPTION" != "WPA-PSK" ] && WPA_PASSPHRASE=""
}

#========================================================================================
# Read wifi settings from newconfig.cfg <=== NOT USED YET
#----------------------------------------------------------------------------------------
pcp_wifi_read_newconfig() {
	unset WPA_SSID WPA_PASSWORD WPA_PW KEY_MGMT WPA_ENCRYPTION

	for i in $(cat $NEWCONFIGCFG); do
		case $i in
			*=*)
				case $i in
					SSID=*)
						WPA_SSID=${i#*=}
						WPA_SSID=$(echo $WPA_SSID | sed -e 's/^\"\(.*\)\"$/\1/')
					;;
					PASSWORD=*)
						WPA_PASSWORD=${i#*=}
						WPA_PASSWORD=$(echo $WPA_PASSWORD | sed -e 's/^\"\(.*\)\"$/\1/')
						WPA_PW=TRUE
					;;
					ENCRYPTION=*)
						KEY_MGMT=${i#*=}
						KEY_MGMT=$(echo $KEY_MGMT | sed -e 's/^\"\(.*\)\"$/\1/')
						[ "$KEY_MGMT" = "WPA" ] && WPA_ENCRYPTION=WPA-PSK
						[ "$KEY_MGMT" = "WEP" ] && WPA_ENCRYPTION=WEP
						[ "$KEY_MGMT" = "NONE" ] && WPA_ENCRYPTION=NONE
					;;
				esac
		esac
	done
}

#========================================================================================
# Write wifi settings to wpa_supplicant.conf file.
#----------------------------------------------------------------------------------------
pcp_wifi_write_wpa_supplicant() {
	echo '# Generated by piCorePlayer' > $WPASUPPLICANTCONF
	echo 'ctrl_interface=/var/run/wpa_supplicant' >> $WPASUPPLICANTCONF
	echo 'ctrl_interface_group=staff' >> $WPASUPPLICANTCONF
	echo 'update_config=1' >> $WPASUPPLICANTCONF
	echo '' >> $WPASUPPLICANTCONF
	echo 'network={' >> $WPASUPPLICANTCONF

	echo '	ssid="'$WPA_SSID'"' >> $WPASUPPLICANTCONF
	if [ "$WPA_ENCRYPTION" = "WPA-PSK" ]; then
		if [ x"" = x"$WPA_PASSPHRASE" ]; then
			echo '	psk="'$WPA_PASSWORD'"' >> $WPASUPPLICANTCONF
		else
			echo '	psk='$WPA_PASSPHRASE >> $WPASUPPLICANTCONF
		fi
	fi
	[ "$WPA_ENCRYPTION" = "WEP"     ] && echo '	psk="'$WPA_PASSWORD'"' >> $WPASUPPLICANTCONF
	[ "$WPA_ENCRYPTION" = "WPA-PSK" ] && echo '	key_mgmt=WPA-PSK' >> $WPASUPPLICANTCONF
	[ "$WPA_ENCRYPTION" = "WEP"     ] && echo '	key_mgmt=NONE' >> $WPASUPPLICANTCONF
	[ "$WPA_ENCRYPTION" = "OPEN"    ] && echo '	key_mgmt=NONE' >> $WPASUPPLICANTCONF
	echo '	auth_alg=OPEN' >> $WPASUPPLICANTCONF
	[ $WPA_HIDDENSSID -eq 1 ] && echo '	scan_ssid='$WPA_HIDDENSSID >> $WPASUPPLICANTCONF

	echo '}' >> $WPASUPPLICANTCONF
}

#========================================================================================
# Load wifi extensions.
#----------------------------------------------------------------------------------------
pcp_wifi_load_extensions() {
	echo "${GREEN}Loading wifi extensions...${NORMAL}"
	sudo -u tc tce-load -i wireless_tools.tcz >/dev/null 2>&1
	[ $? -eq 0 ] && echo "${YELLOW}  Wireless tools loaded.${NORMAL}" || echo "${RED}  Wireless tools load error.${NORMAL}"
	sudo -u tc tce-load -i wpa_supplicant.tcz >/dev/null 2>&1
	[ $? -eq 0 ] && echo -n "${YELLOW}  wpa supplicant loaded.${NORMAL}" || echo -n "${RED}  wpa supplicant load error.${NORMAL}"
	echo "${GREEN} Done.${NORMAL}"
}

#========================================================================================
# Load wifi firmware extensions.
#----------------------------------------------------------------------------------------
pcp_wifi_load_firmware() {
	echo "${GREEN}Loading wifi firmware...${NORMAL}"
	sudo -u tc tce-load -i wifi.tcz >/dev/null 2>&1
	[ $? -eq 0 ] && echo "${YELLOW}  Wifi modules loaded.${NORMAL}" || echo "${RED}  Wifi modules load error.${NORMAL}"
	sudo -u tc tce-load -i firmware-atheros.tcz >/dev/null 2>&1
	[ $? -eq 0 ] && echo "${YELLOW}  Atheros firmware loaded.${NORMAL}" || echo "${RED}  Atheros firmware load error.${NORMAL}"
	sudo -u tc tce-load -i firmware-brcmwifi.tcz >/dev/null 2>&1
	[ $? -eq 0 ] && echo "${YELLOW}  Broadcom USB firmware loaded.${NORMAL}" || echo "${RED}  Broadcom USB firmware load error.${NORMAL}"
	sudo -u tc tce-load -i firmware-ralinkwifi.tcz >/dev/null 2>&1
	[ $? -eq 0 ] && echo "${YELLOW}  Ralink firmware loaded.${NORMAL}" || echo "${RED}  Ralink firmware load error.${NORMAL}"
	sudo -u tc tce-load -i firmware-rtlwifi.tcz >/dev/null 2>&1
	[ $? -eq 0 ] && echo "${YELLOW}  Realtek firmware loaded.${NORMAL}" || echo "${RED}  Realtek firmware load error.${NORMAL}"
	sudo -u tc tce-load -i firmware-rpi3-wireless.tcz >/dev/null 2>&1
	[ $? -eq 0 ] && echo "${YELLOW}  RPi Broadcom firmware loaded.${NORMAL}" || echo "${RED}  RPi Broadcom firmware load error.${NORMAL}"
	echo "${GREEN} Done.${NORMAL}"
}

#========================================================================================
# Check all wifi extensions are installed.
#----------------------------------------------------------------------------------------
pcp_wifi_extension_installed() {
	[ $(pcp_extn_is_installed $1) -eq 0 ] && echo $1' installed.' || echo $1' NOT installed.' 
}

pcp_wifi_all_extensions_installed() {
	for i in wireless_tools wifi wpa_supplicant greg firmware-atheros firmware-brcmwifi firmware-ralinkwifi firmware-rtlwifi firmware-rpi3-wireless; do
		echo -n '<p class="info">[ INFO ] '
		pcp_wifi_extension_installed $i
		echo '</p>'
	done
}

#========================================================================================
# Generate WPA passphrase from SSID and password.
#----------------------------------------------------------------------------------------
pcp_wifi_generate_passphrase() {
	pcp_debug_variables WPA_PASSWORD WPA_ENCRYPTION WPA_PASSPHRASE
	[ $DEBUG -eq 1 ] && echo '<p class="debug">[ DEBUG ] Generating new passphrase...</p>'
	if [ "$WPA_PASSWORD" != "" ] && [ "$WPA_ENCRYPTION" = "WPA-PSK" ]; then
		WPA_PASSPHRASE="$(wpa_passphrase $WPA_SSID $WPA_PASSWORD)"
		if [ $? -eq 0 ]; then
			WPA_PASSPHRASE=$(echo $WPA_PASSPHRASE | cut -d = -f 5 | cut -b 1-64)
			WPA_PASSWORD=""
		fi
	else
		if [ "$WPA_PASSPHRASE" = "" ]; then
			WPA_PASSPHRASE="[ ERROR ] Password has not been set."
		fi
	fi
	pcp_debug_variables WPA_PASSWORD WPA_ENCRYPTION WPA_PASSPHRASE
}

#========================================================================================
# wifi extensions and dependencies.
#----------------------------------------------------------------------------------------
#
# piCorePlayer.dep
# |
# |--pcp.tcz.dep
# |   |
# |   |--pcp-base.tcz
# |   |--alsa.tcz.dep
# |   |   |
# |   |   \--libasound.tcz.dep
# |   |       |
# |   |       \alsa-modules-KERNEL.tcz.
# |   |
# |   |--alsa-utils.tcz.dep
# |   |   |
# |   |   |--libasound.tcz->
# |   |   \--ncurses.tcz.
# |   |
# |   |--busybox-httpd.tcz
# |   |--openssh.tcz.dep
# |   |   |
# |   |   |--libedit.tcz.dep
# |   |   |   |
# |   |   |   \--ncurses.tcz.
# |   |   |
# |   |   \--openssl.tcz.dep
# |   |       |
# |   |       \--ca-certificates.tcz.
# |   |
# |   |--dialog.tcz.dep
# |   |   |
# |   |   \--ncurses.tcz.
# |   |
# |   \--pcp-squeezelite.tcz.dep
# |       |
# |       |--pcp-libmpg123.tcz.dep
# |       |   |
# |       |   \--libasound.tcz.dep
# |       |       |
# |       |       \--alsa-modules-KERNEL.tcz.
# |       |
# |       |--pcp-libfaad2.tcz
# |       |--pcp-libsoxr.tcz
# |       |--pcp-libmad.tcz
# |       |--pcp-libvorbis.tcz
# |       |   |
# |       |   \--pcp-libogg.tcz.
# |       |
# |       |--pcp-libflac.tcz
# |       |   |
# |       |   \--pcp-libogg.tcz.
# |       |
# |       |--libasound.tcz
# |       |   |
# |       |   \--alsa-modules-KERNEL.tcz.
# |       |
# |       \--wiringpi.tcz.
# |
# |--firmware-atheros.tcz
# |--firmware-brcmwifi.tcz
# |--firmware-ralinkwifi.tcz
# |--firmware-rtlwifi.tcz
# |--firmware-rpi3-wireless.tcz
# |
# \--wifi.tcz.dep
#     |
#     |--wireless_tools.tcz.dep
#     |   |
#     |   |--libiw.tcz
#     |   \--wireless-KERNEL.tcz
#     |
#     \--wpa_supplicant.tcz.dep
#         |
#         |--libnl.tcz
#         |--openssl.tcz.dep
#         |   |
#         |   \--ca-certificates.tcz.
#         |
#         \--readline.tcz
#             |
#             \--ncurses.tcz.

#cat piCorePlayer.dep
# pcp.tcz
# firmware-atheros.tcz
# firmware-brcmwifi.tcz
# firmware-rpi3-wireless.tcz
# firmware-ralinkwifi.tcz
# firmware-rtlwifi.tcz
# wifi.tcz
