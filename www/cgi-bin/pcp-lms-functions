#!/bin/sh
# pcp-lms-functions
# These are the common functions used to interface with LMS.

# Version: 4.0.0 2018-04-22
#	Changed to javascript controls and lms jsonrpc interface. PH.

# Version: 3.20 2017-03-08
#	Changed pcp_controls. GE.
#	Fixed pcp-xxx-functions issues. GE.

# Version: 3.12 2017-01-30
#	Added OPTIONS to .slimconfig.cfg for commandline options

# Version: 3.10 2016-12-23
#	Fixed players tabs for new changes in the LMS cli. PH.

# Version: 0.01 2015-02-03 GE
#	Original.

pcp_debug_log "$0 - Running pcp-lms-functions..."

LMSIP=$(pcp_lmsip)
WGET="busybox wget"

pcp_lms_status() {
	sudo /usr/local/etc/init.d/slimserver status > /dev/null 2>&1
	echo $?
}

#========================================================================================
# LMS controls toolbar
#----------------------------------------------------------------------------------------
function version { echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'; }

pcp_controls() {
	if [ "$LMSCONTROLS" = "yes" ] && [ $MODE -ge $MODE_ADVANCED ] ; then
		[ x"" = x"$LMSWEBPORT" ] && LMSPORT=9000 || LMSPORT=$LMSWEBPORT
		LMSIP=$(pcp_lmsip)
		echo '<!-- Start of pcp_lms_controls toolbar -->'
		echo '<table class="bgblack">'
		echo '  <tr>'
		echo '    <td>'
		echo '      <p>'
		echo '        <button class="ctrlbutton" onclick="return lms_controls_send('\'''$LMSIP''\'', '\'''$LMSPORT''\'', '\'''$NAME''\'', '\''randomplay'\'', '\''tracks'\'')">Random</button>'
		echo '        <button class="ctrlbutton" onclick="return lms_controls_send('\'''$LMSIP''\'', '\'''$LMSPORT''\'', '\'''$NAME''\'', '\''mixer'\'', '\''volume'\'', '\''+5'\'')">Volume Up '$BLACKTRIANGLE'</button>'
		echo '        <button class="ctrlbutton" onclick="return lms_controls_send('\'''$LMSIP''\'', '\'''$LMSPORT''\'', '\'''$NAME''\'', '\''mixer'\'', '\''volume'\'', '\''-5'\'')">Volume Down '$BLACKTRIANGLEDOWN'</button>'
		echo '        <button class="ctrlbutton" onclick="return lms_controls_send('\'''$LMSIP''\'', '\'''$LMSPORT''\'', '\'''$NAME''\'', '\''playlist'\'', '\''jump'\'', '\''-1'\'')">'$BLACKTRIANGLELEFT$BLACKTRIANGLELEFT' Previous Track</button>'
		echo '        <button class="ctrlbutton" onclick="return lms_controls_send('\'''$LMSIP''\'', '\'''$LMSPORT''\'', '\'''$NAME''\'', '\''playlist'\'', '\''jump'\'', '\''+1'\'')">Next Track '$BLACKTRIANGLERIGHT$BLACKTRIANGLERIGHT'</button>'
		echo '        <button class="ctrlbutton" onclick="return lms_controls_send('\'''$LMSIP''\'', '\'''$LMSPORT''\'', '\'''$NAME''\'', '\''play'\'')">Play '$BLACKTRIANGLERIGHT'</button>'
		echo '        <button class="ctrlbutton" onclick="return lms_controls_send('\'''$LMSIP''\'', '\'''$LMSPORT''\'', '\'''$NAME''\'', '\''stop'\'')">Stop '$FILLEDSAMLLSQUARE'</button>'
		if [ $MODE -ge $MODE_BETA -a $(version $(pcp_lms_version)) -ge $(version "7.9.2") ]; then
			# Now Playing Information in Javascript.  Requires LMS 7.9.2
			pcp_incr_id
			# Note: The javascript calls must reference the symbols via hex codes \uxxxx
			echo '        <a id="'$ID'a" class="ctrlmoreless" href=# title="Now Playing" onclick="return ctrlmore('\'''$ID''\'')">'$BLACKTRIANGLEDOWN'</a>'
			echo '      </p>'
			echo '      <div id="'$ID'" class="ctrlless">'
			echo '        <iframe id="nowplaying" src="nowplaying.cgi" frameborder="0" scrolling="no" style="border-style: none;width: 100%; height: 155px;"></iframe>'
			echo '      </div>'
		else
			echo '      </p>'
		fi
		echo '    </td>'
		echo '  </tr>'
		echo '</table>'
		echo '<!-- End of pcp_lms_controls toolbar -->'
	else
		echo '<!-- pcp_lms_controls toolbar set to no -->'
	fi
}

#========================================================================================
# LMS controls from LMS web interface
#----------------------------------------------------------------------------------------
pcp_lms_controls() {
	[ x"" = x"$LMSWEBPORT" ] && LMSPORT=9000 || LMSPORT=$LMSWEBPORT
	MAC=$(pcp_controls_mac_address)
	LMSIP=$(pcp_lmsip)
	echo '<iframe src="http://'${LMSIP}':'${LMSPORT}'/status_header.html?player='${NAME}'" width="956" height="152" frameborder="0" scrolling="no" ></iframe>'
}

#========================================================================================
# Get information from LMS json interface
#	busybox wget -q -O- --post-data='{"id":1,"method":"slim.request","params": [ "-", [ "players", "0", "999" ] ]}' 
#          --header 'Content-Type: application/json' http://$LMSIP:9000/jsonrpc.js
#----------------------------------------------------------------------------------------
pcp_lms_build_loop() {
	if [ "$1" != "" ]; then
		[ "$RLOOP" == '[' ] && RLOOP="$RLOOP\"$1\"" ||RLOOP="$RLOOP,\"$1\""
		shift
		NEXT=$@
		[ "$NEXT" != "" ] && pcp_lms_build_loop $NEXT
	fi
}

pcp_lms_build_request() {
	#Should be at least 2 arguments
	#arguments should be <player id or name> <command> <arguments for command>
	#For player non-specific request player id is "-"
	ID=$1
	shift
	RLOOP="["
	pcp_lms_build_loop $@
	REQ="{\"id\":1,\"method\":\"slim.request\",\"params\":[ \"$ID\", $RLOOP]]}"
	echo $REQ
}

pcp_lms_build_result() {
	#Should be at least 2 arguments, result is almost always the first.
	RLOOP="["
	pcp_lms_build_loop $@
	REQ="$RLOOP]"
	# escape the brackets [ ] for egrep and sed
	echo $REQ | sed 's/\[/\\\[/' | sed 's/\]/\\\]/'
}

pcp_lms_json_request() {
	LMSIP=$(pcp_lmsip)
	$WGET -q -O- --post-data="$REQUEST" --header 'Content-Type: application/json' http://$LMSIP:9000/jsonrpc.js | JSON.awk - > /tmp/json_req
	cat /tmp/json_req | egrep "$RESULT" | sed -r "s/${RESULT}[[:space:]]{1,9}//" | sed 's/\"//g'
}

pcp_lms_json_request_list() {
	LMSIP=$(pcp_lmsip)
	$WGET -q -O- --post-data="$REQUEST" --header 'Content-Type: application/json' http://$LMSIP:9000/jsonrpc.js | JSON.awk - > /tmp/json_list
	NUMRESULT=$(pcp_lms_build_result result count)
	NO_OF_RESULTS=$(cat /tmp/json_list | egrep "$NUMRESULT" | sed -r "s/${NUMRESULT}[[:space:]]{1,9}//")
	echo $NO_OF_RESULTS
}

pcp_lms_json_request_debug() {
	LMSIP=$(pcp_lmsip)
	$WGET -q -O- --post-data="$REQUEST" --header 'Content-Type: application/json' http://$LMSIP:9000/jsonrpc.js | JSON.awk - > /tmp/json_req
	cat /tmp/json_req
}

#========================================================================================
# Player commands and queries
#----------------------------------------------------------------------------------------
#	player count ?				Implemented
#	player id ?					Implemented
#	player uuid ?				Implemented
#	player name ?				Implemented
#	player ip ?					Implemented
#	player model ?				Implemented
#	player isplayer ?			Implemented
#	player displaytype ?		Implemented
#	player canpoweroff ?		Implemented
#	signalstrength ?			implemented
#	name						Implemented
#	connected ?					Implemented
#	sleep
#	sync
#	syncgroups
#	power						Implemented
#	mixer volume				Implemented
#	mixer muting
#	mixer bass
#	mixer treble
#	mixer pitch
#	show
#	display
#	linesperscreen
#	display ? ?
#	displaynow ? ?
#	playerpref
#	button
#	ir
#	irenable
#	connect						Implemented
#	client forget
#	disconnect
#	players


pcp_lms_player_count() {
	REQUEST=$(pcp_lms_build_request - player count ?)
	RESULT=$(pcp_lms_build_result result _count)
	pcp_lms_json_request
}

pcp_lms_player_id() {
	REQUEST=$(pcp_lms_build_request $NAME player id 0 ?)
	RESULT=$(pcp_lms_build_result result _id)
	pcp_lms_json_request
}

pcp_lms_player_uuid() {
	REQUEST=$(pcp_lms_build_request $NAME player uuid 0 ?)
	RESULT=$(pcp_lms_build_result result _uuid)
	pcp_lms_json_request
}

pcp_lms_player_name() {
	REQUEST=$(pcp_lms_build_request $NAME player name 0 ?)
	RESULT=$(pcp_lms_build_result result _name)
	pcp_lms_json_request
}

pcp_lms_player_ip() {
	REQUEST=$(pcp_lms_build_request $NAME player ip 0 ?)
	RESULT=$(pcp_lms_build_result result _ip)
	pcp_lms_json_request
}

pcp_lms_player_model() {
	REQUEST=$(pcp_lms_build_request $NAME player model 0 ?)
	RESULT=$(pcp_lms_build_result result _model)
	pcp_lms_json_request
}

pcp_lms_player_isplayer() {
	REQUEST=$(pcp_lms_build_request $NAME player isplayer 0 ?)
	RESULT=$(pcp_lms_build_result result _isplayer)
	pcp_lms_json_request
}

pcp_lms_player_displaytype() {
	REQUEST=$(pcp_lms_build_request $NAME player displaytype 0 ?)
	RESULT=$(pcp_lms_build_result result _displaytype)
	pcp_lms_json_request
}

pcp_lms_player_canpoweroff() {
	REQUEST=$(pcp_lms_build_request $NAME player canpoweroff 0 ?)
	RESULT=$(pcp_lms_build_result result _canpoweroff)
	pcp_lms_json_request
}

pcp_lms_signalstrength() {
	REQUEST=$(pcp_lms_build_request $NAME signalstrength 0 ?)
	RESULT=$(pcp_lms_build_result result _signalstrength)
	pcp_lms_json_request
}

pcp_lms_name() {
	REQUEST=$(pcp_lms_build_request $NAME name 0 ?)
	RESULT=$(pcp_lms_build_result result _value)
	pcp_lms_json_request
}

pcp_lms_connected() {
	REQUEST=$(pcp_lms_build_request $NAME connected ?)
	RESULT=$(pcp_lms_build_result result _connected)
	pcp_lms_json_request
}

pcp_lms_nowplaying() {
	#Use the Squeezelite name, does not need to be mac address.
	REQUEST=$(pcp_lms_build_request $NAME status - 1 tags:cgABbehldiqtyrSuoKLNJ)
	RESULT=$(pcp_lms_build_result result remoteMeta artwork_url)
	pcp_lms_json_request
}

pcp_lms_players() {
	[ "$1" = "" ] && model="squeezelite" || model=$1
	REQUEST=$(pcp_lms_build_request - players 0 999)
	NO_OF_PLAYERS=$(pcp_lms_json_request_list)

	i=0
	while [ $i -lt $NO_OF_PLAYERS ]; do
		NAMES=$(cat /tmp/json_list | egrep "\[\"result\",\"players_loop\",${i},\"name\"\]" | sed -r 's/\[\"result\",\"players_loop\",[0-9]{1,3},\"name\"\][[:space:]]{1,9}//' | sed 's/\"//g')
		MODEL=$(cat /tmp/json_list | egrep "\[\"result\",\"players_loop\",${i},\"model\"\]" | sed -r 's/\[\"result\",\"players_loop\",[0-9]{1,3},\"model\"\][[:space:]]{1,9}//' | sed 's/\"//g')
		IP=$(cat /tmp/json_list | egrep  "\[\"result\",\"players_loop\",${i},\"ip\"\]" | sed -r 's/\[\"result\",\"players_loop\",[0-9]{1,3},\"ip\"\][[:space:]]{1,9}//')
		IPADDR=$(echo ${IP%\:*} | sed 's/\"//g')
		CONNECTED=$(cat /tmp/json_list | egrep  "\[\"result\",\"players_loop\",${i},\"connected\"\]" | sed -r 's/\[\"result\",\"players_loop\",[0-9]{1,3},\"connected\"\][[:space:]]{1,9}//' | sed 's/\"//g')
		[ "$MODEL" = "$model" ] && printf "%s,%s,%s\n" "$NAMES" "$IPADDR" "$CONNECTED"
		i=$((i+1))
	done
}

pcp_lms_power() {
	case $1 in
		on) VALUE=1 ;;
		off) VALUE=0 ;;
	esac
	REQUEST=$(pcp_lms_build_request $NAME power $VALUE)
	RESULT="NONE"
	pcp_lms_json_request
}

pcp_lms_volume_up() {
	AMOUNT=5
	REQUEST=$(pcp_lms_build_request $NAME mixer volume +$AMOUNT)
	RESULT="NONE"
	pcp_lms_json_request
}

pcp_lms_volume_down() {
	AMOUNT=5
	REQUEST=$(pcp_lms_build_request $NAME mixer volume -$AMOUNT)
	RESULT="NONE"
	pcp_lms_json_request
}

pcp_lms_volume_set() {
	AMOUNT=$1
	REQUEST=$(pcp_lms_build_request $NAME mixer volume $AMOUNT)
	RESULT="NONE"
	pcp_lms_json_request
}

pcp_lms_player_status() {
##  All player information is returned
	REQUEST=$(pcp_lms_build_request $NAME status -)
	RESULT="NONE"
	pcp_lms_json_request
	cat /tmp/json_req
}

pcp_lms_connect() {
	NEWLMSIP=$1
	REQUEST=$(pcp_lms_build_request $NAME connect $NEWLMSIP)
	RESULT="NONE"
	pcp_lms_json_request
}

#========================================================================================
# ServerInfo
#----------------------------------------------------------------------------------------
#	version							Implemented
pcp_lms_version() {
	REQUEST=$(pcp_lms_build_request - version ?)
	RESULT=$(pcp_lms_build_result result _version)
	pcp_lms_json_request
}

#========================================================================================
# Database commands and queries
#----------------------------------------------------------------------------------------
#	rescan							Implemented
#	rescanprogress
#	abortscan
#	wipecache						Implemented
#	info total genres ?				Implemented
#	info total artists ?			Implemented
#	info total albums ?				Implemented
#	info total songs ?				Implemented
#	genres
#	artists							Implemented
#	albums
#	years
#	mediafolder
#	musicfolder
#	playlists
#	playlists tracks
#	playlists new
#	playlists rename
#	playlists delete
#	playlists edit
#	songinfo
#	titles
#	search
#	pragma

pcp_lms_rescan() {
	REQUEST=$(pcp_lms_build_request - rescan)
	RESULT="NONE"
	pcp_lms_json_request
}

pcp_lms_wipecache() {
	REQUEST=$(pcp_lms_build_request - wipecache)
	RESULT="NONE"
	pcp_lms_json_request
}

pcp_lms_info_total_genres() {
	REQUEST=$(pcp_lms_build_request - info total genres ?)
	RESULT=$(pcp_lms_build_result result _genres)
	pcp_lms_json_request
}

pcp_lms_info_total_artists() {
	REQUEST=$(pcp_lms_build_request - info total artists ?)
	RESULT=$(pcp_lms_build_result result _artists)
	pcp_lms_json_request
}

pcp_lms_info_total_albums() {
	REQUEST=$(pcp_lms_build_request - info total albums ?)
	RESULT=$(pcp_lms_build_result result _albums)
	pcp_lms_json_request
}

pcp_lms_info_total_songs() {
	REQUEST=$(pcp_lms_build_request - info total songs ?)
	RESULT=$(pcp_lms_build_result result _songs)
	pcp_lms_json_request
}

pcp_lms_artists() {
	REQUEST=$(pcp_lms_build_request - artists 0 999999)
	NO_OF_ARTISTS=$(pcp_lms_json_request_list)
	[ "$1" == "" ] && MAX=$NO_OF_ARTISTS || MAX=$1

	i=0
	while [ $i -lt $MAX ]; do
#
#		todo: the loop number does not come back quoted.....match numbers quoted or not
#
		ARTIST=$(cat /tmp/json_list | egrep "\[\"result\",\"artists_loop\",${i},\"artist\"\]" | sed -r 's/\[\"result\",\"artists_loop\",[0-9]{1,3},\"artist\"\][[:space:]]{1,9}//' | sed 's/\"//g')
		ID=$(cat /tmp/json_list | egrep  "\[\"result\",\"artists_loop\",${i},\"id\"\]" | sed -r 's/\[\"result\",\"artists_loop\",[0-9]{1,3},\"id\"\][[:space:]]{1,9}//' | sed 's/\"//g')
		printf "<p>id(%s) artist(%s) - %s</p>\n" "$ID" "$ARTIST" "$i"
		i=$((i+1))
	done
}

#========================================================================================
# Playlist commands and queries
#----------------------------------------------------------------------------------------
#	play						Implemented
#	stop						Implemented
#	pause						Implemented
#	mode ?						Implemented
#	time						Implemented
#	genre ?						Implemented
#	artist ?					Implemented
#	album ?						Implemented
#	title ?						Implemented
#	duration ?					Implemented
#	remote ?					Implemented
#	current_title ?				Implemented
#	path ?						Implemented
#	playlist play
#	playlist add
#	playlist insert
#	playlist deleteitem
#	playlist move
#	playlist delete
#	playlist preview
#	playlist resume
#	playlist save
#	playlist loadalbum
#	playlist addalbum
#	playlist loadtracks
#	playlist addtracks
#	playlist insertalbum
#	playlist deletealbum
#	playlist clear
#	playlist zap
#	playlist name ?
#	playlist url ?
#	playlist modified ?
#	playlist playlistsinfo
#	playlist index
#	playlist genre ?
#	playlist artist ?
#	playlist album ?
#	playlist title ?
#	playlist path ?
#	playlist remote ?
#	playlist duration ?
#	playlist tracks ?
#	playlist shuffle
#	playlist repeat
#	playlistcontrol

pcp_lms_play() {
	REQUEST=$(pcp_lms_build_request $NAME play)
	RESULT="NONE"
	pcp_lms_json_request
}

pcp_lms_stop() {
	REQUEST=$(pcp_lms_build_request $NAME stop)
	RESULT="NONE"
	pcp_lms_json_request
}

pcp_lms_pause() {
	REQUEST=$(pcp_lms_build_request $NAME pause)
	RESULT="NONE"
	pcp_lms_json_request
}

pcp_lms_mode() {
	REQUEST=$(pcp_lms_build_request $NAME mode ?)
	RESULT=$(pcp_lms_build_result result _mode)
	pcp_lms_json_request
}

# Todo: jump forward, jump back, not past value of duration
pcp_lms_time() {
	REQUEST=$(pcp_lms_build_request $NAME time ?)
	RESULT=$(pcp_lms_build_result result _time)
	pcp_lms_json_request
}

pcp_lms_genre() {
	REQUEST=$(pcp_lms_build_request $NAME genre ?)
	RESULT=$(pcp_lms_build_result result _genre)
	pcp_lms_json_request
}

pcp_lms_artist() {
	REQUEST=$(pcp_lms_build_request $NAME artist ?)
	RESULT=$(pcp_lms_build_result result _artist)
	pcp_lms_json_request
}

pcp_lms_album() {
	REQUEST=$(pcp_lms_build_request $NAME album ?)
	RESULT=$(pcp_lms_build_result result _album)
	pcp_lms_json_request
}

pcp_lms_title() {
	REQUEST=$(pcp_lms_build_request $NAME title ?)
	RESULT=$(pcp_lms_build_result result _title)
	pcp_lms_json_request
}

pcp_lms_duration() {
	REQUEST=$(pcp_lms_build_request $NAME duration ?)
	RESULT=$(pcp_lms_build_result result _duration)
	pcp_lms_json_request
}

pcp_lms_remote() {
	REQUEST=$(pcp_lms_build_request $NAME remote ?)
	RESULT=$(pcp_lms_build_result result _remote)
	pcp_lms_json_request
}

pcp_lms_current_title() {
	REQUEST=$(pcp_lms_build_request $NAME current_title ?)
	RESULT=$(pcp_lms_build_result result _current_title)
	pcp_lms_json_request
}

pcp_lms_path() {
	REQUEST=$(pcp_lms_build_request $NAME path ?)
	RESULT=$(pcp_lms_build_result result _path)
	pcp_lms_json_request
}

pcp_lms_next() {
	REQUEST=$(pcp_lms_build_request $NAME playlist jump +1)
	RESULT="NONE"
	pcp_lms_json_request
}

pcp_lms_prev() {
	REQUEST=$(pcp_lms_build_request $NAME playlist jump -1)
	RESULT="NONE"
	pcp_lms_json_request
}

pcp_lms_playlist_play() {
	if [ "$1" != "" ]; then
		REQUEST=$(pcp_lms_build_request $NAME playlist play $1)
		RESULT="NONE"
		pcp_lms_json_request
	fi
}

#========================================================================================
# Plugins commands and queries 
#---------------------------------------------------------------------------------------
# The following command and queries are proposed by server plugins. The plugin must be
# enabled in the server configuration for the commands and queries to be available to
# the CLI client. Please use query "can" to determine if the given command or query
# is available. Query "radios" can alternatively be used to get a list of available
# radio station plugin CLI queries. 
#	radios 
#	apps 
#	Live Music Archive, Live365, MP3tunes, Pandora, Podcasts, RadioIO, RadioTime, Rhapsody, Shoutcast, SIRIUS, Staff Picks, RSS 
#	Favorites 
#	RandomPlay 
#	MusicIP 
#---------------------------------------------------------------------------------------
pcp_lms_randomplay() {
	MODE=tracks
	REQUEST=$(pcp_lms_build_request $NAME randomplay $MODE)
	RESULT="NONE"
	pcp_lms_json_request
}

#========================================================================================
# Local LMS server related functions
#----------------------------------------------------------------------------------------
pcp_lms_set_slimconfig(){
	CFG="/home/tc/.slimserver.cfg"
	# Read the current config file, if present
	[ -f $CFG ] && . $CFG
	case $1 in
		CACHE)
			# Write new location for Cache and Prefs
			echo "CACHE=$2/Cache" > $CFG
			echo "PREFS=$2/prefs" >> $CFG
			[ -n "$LOGS" ] && echo "LOGS=$LOGS" >> $CFG
			[ -n "$LMSUSER" ] && echo "LMSUSER=$LMSUSER" >> $CFG
			[ -n "$LMSGROUP" ] && echo "LMSGROUP=$LMSGROUP" >> $CFG
			[ -n "$OPTIONS" ] && echo "OPTIONS=$OPTIONS" >> $CFG
		;;
		OPTS)
			unset NEWOPTIONS
			if [ "$OPTIONS" != "" ]; then  
				for i in $OPTIONS; do
					case $i in
						$2);;  # Do Nothing, we will add later if we are adding.
						*)NEWOPTIONS="${NEWOPTIONS} ${i} ";;  # Add with extra spaces, will remove extra space later
					esac
				done
			fi
			if [ "$3" = "ADD" ]; then
				NEWOPTIONS="${NEWOPTIONS} $2"
			fi
			OPTIONS=$(echo ${NEWOPTIONS} | sed 's/ \{1,\}/ /g')   # Remove extra blanks
			sed -i '/OPTIONS=/d' $CFG   # Remove the options line from file
			echo "OPTIONS=\"$OPTIONS\"" >> $CFG
		;;
		*) echo "ERROR"
		;;
	esac
}
