Index: share/jive/applets/ScreenSavers/ScreenSaversApplet.lua
===================================================================
--- share/jive/applets/ScreenSavers/ScreenSaversApplet.lua	(revision 783)
+++ share/jive/applets/ScreenSavers/ScreenSaversApplet.lua	(working copy)
@@ -21,6 +21,10 @@
 -- stuff we use
 local ipairs, pairs, tostring, tonumber, bit = ipairs, pairs, tostring, tonumber, bit
 
+---------------------------------------------------------------------
+local io			   = require("io")
+---------------------------------------------------------------------
+
 local os               = require("os")
 local oo               = require("loop.simple")
 
@@ -234,15 +238,17 @@
 	end
 	local screensaver = self.screensavers[self.currentSS]
 
+---------------------------------------------------------------------
 	-- In some situations the timer restart below tries to activate a SS when one is already running.
-	-- We don't want to do this for BlankScreen when BlankScreen is already active
-	-- This causes the backlight to turn on again after 10 seconds. #14986
-	if self:isScreensaverActive() and self.current == 'BlankScreen' then
-		log:warn("BlankScreen SS is currently active and we're trying to reactivate it. Nothing to activate then, so return")
+	-- We don't want to do this for BlankScreen/DisplayOff when BlankScreen/DisplayOff is already active
+	-- This causes the backlight to turn on again after 10 seconds. #14986 (10 seconds is default value, this is tied to the screensaver delay option)
+	if self:isScreensaverActive() and (self.current == 'BlankScreen' or self.current == "DisplayOff") then
+		log:warn("BlankScreen/DisplayOff SS is currently active and we're trying to reactivate it. Nothing to activate then, so return")
 		return
 	else
 		log:debug('DEBUG: self:isScreensaverActive()', self:isScreensaverActive(), ' self.current: ', self.current)
 	end
+---------------------------------------------------------------------
 
 	-- check if the top window will allow screensavers, if not then
 	-- set the screensaver to activate 10 seconds after the window
@@ -557,25 +563,32 @@
 				   return EVENT_UNUSED
 			   end)
 
+---------------------------------------------------------------------
 	if not self:isSoftPowerOn() then
 		--allow input to pass through, so that the following listeners will be honored
-	        self:_setSSAllowedActions(true, {}, true)
-
-		window:ignoreAllInputExcept(    { "power", "power_on", "power_off" },
-		                                function(actionEvent)
-		                                        self:_powerActionHandler(actionEvent)
-		                                end)
-		window:addListener(bit.bor(EVENT_MOUSE_PRESS, EVENT_MOUSE_HOLD, EVENT_MOUSE_DRAG),
-		                        function (event)
-			                        self:_showPowerOnWindow()
-			                        return EVENT_CONSUME
-		                        end)
-		window:addListener(     EVENT_SCROLL,
-					function ()
-						self:_showPowerOnWindow()
-					end)
-
+		
+		if _read("/sys/class/backlight/rpi_backlight/brightness") ~= nil then
+			if appletManager:callService("getEnablePowerOnButtonWhenOff") then
+				self:_setSSAllowedActions(true, {}, true)
+				window:ignoreAllInputExcept(    { "power", "power_on", "power_off" },
+												function(actionEvent)
+														self:_powerActionHandler(actionEvent)
+												end)
+				window:addListener(bit.bor(EVENT_MOUSE_PRESS, EVENT_MOUSE_HOLD, EVENT_MOUSE_DRAG),
+										function (event)
+											self:_showPowerOnWindow()
+											return EVENT_CONSUME
+										end)
+				window:addListener(         EVENT_SCROLL,
+							function ()
+								self:_showPowerOnWindow()
+							end)
+			else
+				self:_setSSAllowedActions(nil, nil, nil)
+			end
+		end
 	end
+---------------------------------------------------------------------
 
 	log:debug("Overriding the default window action 'bump' handling to allow action to fall through to framework listeners")
 	window:removeDefaultActionListeners()
@@ -817,8 +830,10 @@
 			},
 		})
 
+---------------------------------------------------------------------
 	-- only present a WHEN OFF option when there is a local player present
-	if Player:getLocalPlayer() then
+	-- or when running on piCorePlayer with an official display attached
+	if Player:getLocalPlayer() or (_read("/usr/local/sbin/piversion.cfg") ~= nil and _read("/sys/class/backlight/rpi_backlight/brightness") ~= nil) then
 		menu:addItem(
 			{
 				text = self:string("SCREENSAVER_WHEN_OFF"),
@@ -830,6 +845,7 @@
 			}
 		)
 	end
+---------------------------------------------------------------------
 	
 	menu:setComparator(menu.itemComparatorWeightAlpha)
 	for setting_name, screensaver in pairs(self.screensaverSettings) do
@@ -859,7 +875,17 @@
 	return window
 end
 
-
+---------------------------------------------------------------------
+function _read(file)
+	local fh, err = io.open(file, "r")
+	if err then
+		return nil
+	end
+	local fc = fh:read("*all")
+	fh:close()
+	return fc
+end
+---------------------------------------------------------------------
 --[[
 
 =head1 LICENSE
