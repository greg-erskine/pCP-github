#!/bin/sh

BT_LOG="/var/log/pcp_bt.log"
ASOUND="/etc/asound.conf"
ASOUND_TMP="/tmp/btasound.conf"
BT_ALSA_DEVICE="BTSpeaker"
ASOUND_PCM="pcm.${BT_ALSA_DEVICE}"
DAEMON_INITD="/usr/local/etc/init.d/pcp-bt6"
PAIR_DAEMON_INITD="/usr/local/etc/init.d/pcp-pair-agent"
BTDEVICECONF="/usr/local/etc/pcp/pcp-bt.conf"
PAIRED_LIST="/tmp/paired.out"

#Add BT Config to asound.conf
#New connection monitor doesn't use this, but retain for ???
pcp_bt_add_asound() {
cat << EOF | sudo tee -a $ASOUND >/dev/null

#Bluetooth - Generated by piCorePlayer

defaults.bluealsa {
        service "org.bluealsa"
        device 12:23:34:45:56:7A
        profile "a2dp"
        delay 10000
}

$ASOUND_PCM {
        type plug
        slave.pcm {
                type bluealsa
                service "org.bluealsa"
                device 12:23:34:45:56:7A
                profile "a2dp"
                delay 10000
        }
        hint {
                show on
                description "BT Speaker"
        }
}

EOF
}

# Set the BT Device Name in asound.conf
pcp_bt_asound_set_device() {
	echo $1 | grep -Eq '([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$'
	[ $? -eq 0 ] && sudo sed -i -r "s/([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/$1/" $ASOUND
}

#Clear BT Config from asound.conf
pcp_bt_clear_asound() {
/usr/bin/micropython -c "$(cat << EOF
import os
import sys
import ure
infile = open("$ASOUND", "r")
outfile = open("$ASOUND_TMP", "w")

CUT=0
BraceLevel = 0
TRIMBLANK=0

while True:
	ln = infile.readline()
	if ln == "":
		break
#Remove these sections from asound.conf
	if CUT == 0:
		if ("defaults.bluealsa" in ln) or ("$ASOUND_PCM" in ln):
			CUT=1
			if "{" in ln:
				BraceLevel += 1
	else:
		if "{" in ln:
			BraceLevel += 1
		if "}" in ln:
			BraceLevel -= 1
			if BraceLevel == 0:
				ln=""
				CUT=0

	if "#Bluetooth - Generated by piCorePlayer" in ln:
		ln = ''
# Remove Extra Blank Lines
	if (CUT == 0) and (ure.match("^\s*$",ln)):
		if TRIMBLANK == 1:
			ln=""
		else:
			TRIMBLANK=1
	else:
		TRIMBLANK=0

	if CUT == 0:
		if ln != "":
			outfile.write(ln)

infile.close
outfile.close
EOF
)"

	sudo cp -f $ASOUND_TMP $ASOUND
}

# Not used anymore
#attempts to connect a specific device
# pcp_bt_connect_device() {
	# RET=$(gdbus call -y -d "org.bluez" -o "/org/bluez/hci0/${DBUS_BTDEVICE}" -m "org.bluez.Device1.Connect" 2>&1 )
	# case $RET in
		# Error*) echo 1;;
		# *) echo 0;;
	# esac
# }

#Return the connection status of a device
pcp_bt_device_connected() {
	conn_retval=1
	[ ! -f $PAIRED_LIST ] && pcp_bt_paired_devices
	while read line; do
		BTMAC=$(echo $line | cut -d'#' -f1)
		DBUS_BTDEVICE="dev_$(echo $BTMAC | sed 's/:/_/g')"
		RET=$(gdbus call -y -d "org.bluez" -o "/org/bluez/hci0/$DBUS_BTDEVICE" -m "org.freedesktop.DBus.Properties.Get" "org.bluez.Device1" "Connected")
		case $RET in
			*true*) conn_retval=0;;
		esac
	done < $PAIRED_LIST
	echo $conn_retval
}

# Pair a new device
pcp_bt_pair() {

	if [ "$1" = "" ]; then
		echo "This command used with the pCP web interface."
		echo "usage: $0 <BT MAC ADDRESS>"
	fi

	BTDEVICE="$1"
	BTNAME=$(grep "$1" /tmp/btscan.dd | cut -d '#' -f2)

	echo "[ INFO ] Attempting to pair $BTNAME, $BTDEVICE...."

	(echo -e "pair $BTDEVICE\n"; sleep 10; echo -e "trust $BTDEVICE\n"; sleep 1; echo -e "quit\n") | bluetoothctl > /tmp/btpair

	#removes color and ascii codes from saved file.
	sed -i 's///g' /tmp/btpair
	sed -i 's///g' /tmp/btpair
	sed -i -r "s/\[([0-9]{1,2}(;[0-9]{1,2}?)?)?[m|K]//g" /tmp/btpair

	grep -q "Failed to pair" /tmp/btpair
	if [ $? -eq 0 ]; then
		echo "[ ERROR ] Device failed to pair.  Forcing device removal....."
		(echo -e "remove $BTDEVICE\n"; sleep 5; echo -e "quit\n") | bluetoothctl >/dev/null
		echo ""
		echo "[ ERROR ] Please Try to pair again"
		return 1
	else
		#Pairing should have worked, try to connect right away
		bluetoothctl connect $BTDEVICE
	fi

	grep -q "not available" /tmp/btpair
	if [ $? -eq 0 ]; then
		echo "[ ERROR ] Try to reboot device and start over"
		return 1
	fi

	pcp_bt_add_config $BTDEVICE

	return 0
}

#Turn on the power of controller at hci0
pcp_bt_power_enable() {
	gdbus call -y -d "org.bluez" -o "/org/bluez/hci0" -m "org.freedesktop.DBus.Properties.Set" "org.bluez.Adapter1" "Powered" "<true>" 2>/dev/null
	[ $? -eq 0 ] && echo 0 || echo 1
}

# Controller power status
pcp_bt_power_status() {
	STATUS=$(gdbus call -y -d "org.bluez" -o "/org/bluez/hci0" -m "org.freedesktop.DBus.Properties.Get" "org.bluez.Adapter1" "Powered")
	case $STATUS in
		*true*) echo 0;;
		*) echo 1;;
	esac
}

pcp_bt_newscan(){
	[ "$1" == "" ] && SCAN_TIME=10 || SCAN_TIME=$1
	(echo -e "scan on\n"; sleep $SCAN_TIME; echo -e "quit\n") | bluetoothctl > /tmp/btscan

	bluetoothctl devices > /tmp/btscan
	bluetoothctl paired-devices > /tmp/paired-devices

	#Remove Currently paired devices from list
	while read -r line
	do
		sed -i "/$line/d" /tmp/btscan
	done < /tmp/paired-devices

	while read -r line
	do
		#check the device class to see if it is audio
		device=$(echo $line | cut -d' ' -f2)
		class=$(bluetoothctl info $device | grep "Class:" | awk -F'0x' '{print $2}')
		if [ "$class" != "" ]; then
			if [ "$(isaudioclass.py $class)" == "1" ]; then
				echo $line | awk -F'Device ' '{print $2}' | awk '{out=$1"#";for(i=2;i<=NF;i++){out=out$i" "}; print out"#selected"}'
			fi
		fi
	done < /tmp/btscan
}

#Returns the address of the controller at hci0.
pcp_bt_controller_address() {
	RET=$(gdbus call -y -d "org.bluez" -o "/org/bluez/hci0" -m "org.freedesktop.DBus.Properties.Get" "org.bluez.Adapter1" "Address"  | cut -d\' -f2)
	echo $RET
}

#Takes device MAC address from $1 and removes the device
pcp_bt_forget_device() {
	DBUS_PATH="/org/bluez/hci0/dev_$(echo $1 | sed 's/:/_/g')"
	gdbus call -y -d org.bluez -o "/org/bluez/hci0" -m "org.bluez.Adapter1.RemoveDevice" "$DBUS_PATH" 2>/dev/null
	[ $? -eq 0 ] && echo 0 || echo 1
}

#Saves a list of currently paired devices in a dropdown list format for the web interface.
pcp_bt_paired_devices() {
	rm -f $PAIRED_LIST
	for I in $(gdbus introspect -y -d org.bluez -o "/org/bluez/hci0" | grep "node dev" | awk -F' ' '{ print $2 }'); do
		PAIRED=$(gdbus call -y -d org.bluez -o "/org/bluez/hci0/$I" -m "org.freedesktop.DBus.Properties.Get" "org.bluez.Device1" "Paired")
		case "$PAIRED" in
			*true*)
				DEVICE=$(echo $I | sed 's/dev_//' | sed 's/_/:/g')
				NAME=$(gdbus call -y -d org.bluez -o "/org/bluez/hci0/$I" -m "org.freedesktop.DBus.Properties.Get" "org.bluez.Device1" "Name" | cut -d\' -f2)
				echo "$DEVICE#$NAME" >> $PAIRED_LIST
			;;
			*);;
		esac
	done
}

pcp_bt_add_config() {

	pcp_bt_paired_devices

	if [ "$1" != "" ]; then
		BTDEVICE="$1"
		BTNAME=$(grep "$1" $PAIRED_LIST | cut -d '#' -f2)

		[ -f $BTDEVICECONF ] || touch $BTDEVICECONF
		grep -q $BTDEVICE $BTDEVICECONF
		[ $? -ne 0 ] && echo "${BTDEVICE}#${BTNAME}#1000" >> $BTDEVICECONF

		grep -q "$ASOUND_PCM" $ASOUND
		[ $? -ne 0 ] && pcp_bt_add_asound

		pcp_bt_asound_set_device $BTDEVICE

	fi
}
