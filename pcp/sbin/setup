#!/bin/sh +x

# Version: 0.01 2015-05-19 GE
#	Original.

BACKTITLE="piCorePlayer 1.19m Basic Setup"

pCPHOME=/home/tc/www/cgi-bin
STATICIP=/opt/eth0.sh

. $pCPHOME/pcp-functions
pcp_variables

#========================================================================================
# Check if dialog.tcz is installed - install if necessary.
#----------------------------------------------------------------------------------------
which dialog
if [ $? = 0 ]; then
	echo 'dialog.tcz already installed.'
else
	if [ ! -f /mnt/mmcblk0p2/tce/optional/dialog.tcz ]; then
		echo 'dialog.tcz downloading... '
		sudo -u tc tce-load -w dialog.tcz
		[ $? = 0 ] && echo 'Done.' || echo 'Error.'
	else
		echo 'dialog.tcz downloaded.'
	fi
	echo 'dialog.tcz installing... '
	sudo -u tc tce-load -i dialog.tcz
	[ $? = 0 ] && echo 'Done.' || echo 'Error.'
fi

#========================================================================================
# Start message
#----------------------------------------------------------------------------------------
pcp_start_message() {
	dialog	--title      "Important Message!" \
			--yes-label  "Continue" \
			--no-label   "Exit" \
			--backtitle  "$BACKTITLE" \
			--yesno      "\nThis basic piCorePlayer setup is only intended for configuration of settings that can't be set through the webgui." \
			10 40

	[ $? = 0 ] || exit
}

#========================================================================================
# Main menu
#----------------------------------------------------------------------------------------
pcp_main_menu() {
	OPTION=$(dialog \
		--title         "Main Menu" \
		--stdout \
		--cancel-label  "Exit" \
		--backtitle     "$BACKTITLE" \
		--menu          "Choose option:" \
		0 0 0 \
		\
		"Webgui"        "Enable/disable web gui" \
		"Static IP"     "Set static IP (wired networks only)" \
		"Wifi"          "Set wifi configuration" \
	)

	[ $? = 0 ] || exit

	case $OPTION in
		Webgui)
			pcp_webgui_menu
			;;
		Static*)
			pcp_dhcp_menu
			pcp_main_menu
			;;
		Wifi)
			pcp_wifi_menu
			pcp_main_menu
			;;
		*)
			echo "Invalid option"
			;;
	esac
}

#========================================================================================
# Webgui
#----------------------------------------------------------------------------------------
pcp_webgui_menu() {
	OPTION=$(dialog \
		--title         "Wegui Menu" \
		--stdout \
		--cancel-label  "Exit" \
		--backtitle     "$BACKTITLE" \
		--menu          "Choose option:" \
		0 0 0 \
		\
		"Enable"        "Enable webgui" \
		"Disable"       "Disable webgui" \
		"Status"        "Webgui status" \
	)

	[ $? = 1 ] && pcp_main_menu

	case $OPTION in
		Enable)
			pcp_webgui_enable
			pcp_webgui_menu
			;;
		Disable)
			pcp_webgui_disable
			pcp_webgui_menu
			;;
		Status)
			pcp_webgui_status
			pcp_webgui_menu
			;;
		*)
			echo "Invalid option"
			;;
	esac
}

#----------------------------------------------------------------------------------------
# Enable webgui
#----------------------------------------------------------------------------------------
pcp_webgui_enable() {
	sudo /usr/local/etc/init.d/httpd start 2>&1 >/dev/null
	sed -i '/httpd start/s/^#\+//' $pCPHOME/do_rebootstuff.sh 2>&1 >/dev/null
	pcp_backup_nohtml 2>&1 >/dev/null

	dialog	--title      "Webgui enabled" \
			--backtitle  "$BACKTITLE" \
			--msgbox     "\nWebgui has been enabled." \
			7 40
}

#----------------------------------------------------------------------------------------
# Disable webgui
#----------------------------------------------------------------------------------------
pcp_webgui_disable() {
	sudo /usr/local/etc/init.d/httpd stop 2>&1 >/dev/null
	sed -i '/httpd start/s/^/#/g' $pCPHOME/do_rebootstuff.sh 2>&1 >/dev/null
	pcp_backup_nohtml 2>&1 >/dev/null

	dialog	--title      "Webgui disabled" \
			--backtitle  "$BACKTITLE" \
			--msgbox     "\nWebgui has been disabled." \
			7 40
}

#----------------------------------------------------------------------------------------
# Status webgui
#----------------------------------------------------------------------------------------
pcp_webgui_status() {
	MSG=$(echo
	ps | grep -v grep | grep httpd
	cat /home/tc/www/cgi-bin/do_rebootstuff.sh | grep init.d/httpd
	echo)

	dialog	--title      "Webgui status - DEBUG info" \
			--backtitle  "$BACKTITLE" \
			--msgbox     "$MSG" \
			0 0
}

#========================================================================================
# Static IP
#----------------------------------------------------------------------------------------
pcp_dhcp_menu() {
	dialog	--title      "DHCP Menu" \
			--yes-label  "DHCP on" \
			--no-label   "DHCP off" \
			--backtitle  "$BACKTITLE" \
			--yesno      "\nTurn <DCHP on> or <DHCP off>. \n\n\
							To turn static IP on, select <DHCP off>. \n\
							To turn static IP off, select <DHCP on>. \n\n" \
			0 0

	if [ $? = 0 ]; then
		pcp_edit_localboot delete
		pcp_nodhcp_bootcode delete
		pcp_main_menu
	else
		pcp_static_ip_menu
	fi
}

pcp_static_ip_menu() {
	pcp_read_script
	exec 3>&1
	VALUES=$(dialog \
		--title            "Static IP Menu" \
		--ok-label         "Save" \
		--cancel-label     "Exit" \
		--output-separator "," \
		--backtitle        "$BACKTITLE" \
		--form             "Create a static IP" \
		0 0 0 \
		\
		"Static IP address:"  1 1  "$IP"         1 20 15 0 \
		"Netmask:"            2 1  "$NETMASK"    2 20 15 0 \
		"Broadcast:"          3 1  "$BROADCAST"  3 20 15 0 \
		"Default gateway:"    4 1  "$GATEWAY"    4 20 15 0 \
		2>&1 1>&3)
	result=$?
	exec 3>&-
	IP=$(echo ${VALUES} | awk -F, '{ print $1 }')
	NETMASK=$(echo $VALUES | awk -F, '{ print $2 }')
	BROADCAST=$(echo $VALUES | awk -F, '{ print $3 }')
	GATEWAY=$(echo $VALUES | awk -F, '{ print $4 }')

	if [ $result = 0 ]; then 
		pcp_edit_localboot add
		pcp_nodhcp_bootcode add
		pcp_write_script
	else
		pcp_main_menu
	fi
}

#----------------------------------------------------------------------------------------
# Read eth0 script
#----------------------------------------------------------------------------------------
pcp_read_script() {
	if [ -f $STATICIP ]; then
		set -- `cat $STATICIP | grep ifconfig`
		IP=$3
		NETMASK=$5
		BROADCAST=$7
		set -- `cat $STATICIP | grep route`
		GATEWAY=$5
	else
		IP=192.168.1.xxx
		NETMASK=255.255.255.0
		BROADCAST=192.168.1.255
		GATEWAY=192.168.1.xxx
	fi
}

#----------------------------------------------------------------------------------------
# Write eth0 script
#----------------------------------------------------------------------------------------
pcp_write_script() {
	sudo echo '#!/bin/sh' >$STATICIP
	sudo echo '# Generated by piCorePlayer' >>$STATICIP
	sudo echo 'echo "[ INFO ] Running $0..."' >>$STATICIP
	sudo echo 'ifconfig eth0 '$IP' netmask '$NETMASK' broadcast '$BROADCAST' up' >>$STATICIP
	sudo echo 'route add default gw '$GATEWAY >>$STATICIP
	sudo echo 'echo nameserver '$GATEWAY' > /etc/resolv.conf' >>$STATICIP
	sudo echo '/etc/init.d/settime.sh' >>$STATICIP
	sudo chmod ugo+x $STATICIP
}

#----------------------------------------------------------------------------------------
# Add/delete /opt/eth0.sh to bootlocal.sh
#----------------------------------------------------------------------------------------
pcp_edit_localboot() {
	[ $DEBUG = 1 ] && echo '<p class="debug">[ DEBUG ] Writing /opt/bootlocal.sh...</p>'
	grep -v eth0.sh /opt/bootlocal.sh >/opt/bootlocal.sh~
	sudo chmod 755 /opt/bootlocal.sh~
	sudo mv /opt/bootlocal.sh~ /opt/bootlocal.sh
	[ $1 = "add" ] && sed -i "4i /opt/eth0.sh" /opt/bootlocal.sh
}

#----------------------------------------------------------------------------------------
# Add/delete nodhcp boot code to /mnt/mmcblk0p1/cmdline.txt
#----------------------------------------------------------------------------------------
pcp_nodhcp_bootcode() {
	[ $DEBUG = 1 ] && echo '<p class="debug">[ DEBUG ] Writing /mnt/mmcblk0p1/cmdline.txt...</p>'
	pcp_mount_mmcblk0p1_nohtml >/dev/null
	if mount | grep $VOLUME >/dev/null; then
		sed -i 's/nodhcp //g' /mnt/mmcblk0p1/cmdline.txt
		[ $1 = "add" ] && sed -i 's/^/nodhcp /' /mnt/mmcblk0p1/cmdline.txt
		pcp_umount_mmcblk0p1_nohtml >/dev/null
	else
		[ $DEBUG = 1 ] && echo '<p class="error">[ ERROR ] '$VOLUME' not mounted</p>'
	fi
}

#========================================================================================
# wifi menu
#----------------------------------------------------------------------------------------
pcp_wifi_menu() {
	dialog	--title      "Wifi Menu" \
			--yes-label  "Wifi on" \
			--no-label   "Wifi off" \
			--backtitle  "$BACKTITLE" \
			--yesno      "\nTurn <Wifi on> or <Wifi off>. \n\n" \
			0 0

	if [ $? = 0 ]; then
		WIFI="on"
		
		pcp_wireless_menu
	else
		WIFI="off"
		
		pcp_main_menu
	fi
}

pcp_wireless_menu() {
	pcp_variables
	exec 3>&1
	VALUES=$(dialog \
		--title            "Wireless Menu" \
		--ok-label         "Save" \
		--cancel-label     "Exit" \
		--output-separator "," \
		--backtitle        "$BACKTITLE" \
		--form             "Setup Wifi" \
		0 0 0 \
		\
		"SSID:"           1 1  "$SSID"        1 20 15 0 \
		"Password:"       2 1  "$PASSWORD"    2 20 15 0 \
		"Security Mode:"  3 1  "$ENCRYPTION"  3 20 15 0 \
		2>&1 1>&3)
	result=$?
	exec 3>&-

	if [ $result = 0 ]; then 
		pcp_wifi_status_menu
		#pcp_write_wifi
	else
		pcp_main_menu
	fi
}

pcp_wifi_status_menu() {
	dialog	--title      "Wifi Status Menu" \
			--backtitle  "$BACKTITLE" \
			--yesno      "\nAre these settings correct? \n\n\
							Wifi:	$WIFI \n\
							SSID:	$SSID \n\
							Password: $PASSWORD \n\
							Security Mode: $ENCRYPTION \n" \
			0 0
}

#========================================================================================
# Main
#----------------------------------------------------------------------------------------
pcp_start_message
#pcp_dhcp_menu
pcp_main_menu

#echo $result
#echo $VALUES
#echo $IP
#echo $NETMASK
#echo $BROADCAST
#echo $GATEWAY
