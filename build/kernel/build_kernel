#!/bin/bash

#################################################################################
#
# build_kernel for pcp kernels
#
# Prep - Need to clone some git repos
#	Directory		Git Repo
#	firmware			https://github.com/raspberrypi/firmware.git
#	linux-git		https://github.com/raspberrypi/linux.git
#	tools				https://github.com/raspberrypi/tools.git (Note, this is for a linux x86 based cross compiler)
#  x-tools        current cg-ng cross compilers
#  pcpCore        Where all the compiled kernels go.
#
#
# ANSI COLORS
CRE="$(echo -e '\r\033[K')"
RED="$(echo -e '\033[1;31m')"
GREEN="$(echo -e '\033[1;32m')"
YELLOW="$(echo -e '\033[1;33m')"
BLUE="$(echo -e '\033[1;34m')"
MAGENTA="$(echo -e '\033[1;35m')"
CYAN="$(echo -e '\033[1;36m')"
WHITE="$(echo -e '\033[1;37m')"
NORMAL="$(echo -e '\033[0;39m')"

BASEWD=$(pwd)
#  This editor is for making some build notes... 
EDITOR="/bin/nano"
# Number of parallel make jobs to use.
JOBS=12
export CONCURRENCY_LEVEL=8
#


LINUX_GIT="linux-git"
UNATTENDED=1

usage(){
	echo "  usage: $0 [-i] [-d] [-m] [-r] [-s] [-t]"
	echo "            -i Interactive compile, after selecting version"
	echo "            -d debug"
	echo "            -h usage"
	echo
}

O=$(/usr/bin/getopt -- udh "$@") || exit 1
eval set -- "$O"

while true; do
	case "$1" in
		-i)  UNATTENDED=0;;
		-d)  DEBUG=1;;
		-h)  usage
			exit 1;;
		*)  break;; # terminate while loop
	esac
	shift
done

echo "Kernel Build Scripts"
echo "*****************************************************************"
echo
echo "Working with linux source from ${LINUX_GIT}"

BUILDKERNEL=1

trimval() {
	echo $1 | cut -d '=' -f2 | xargs
}

if [ ! -d $LINUX_GIT ]; then
	echo "Please start in base pcp build directory $LINUX_GIT"
	exit 1
fi

cd ${LINUX_GIT}
git status | grep -q clean
if [ $? -eq 1 ]; then
	echo "Linux working branch is not clean, please fix and restart build."
	exit 1
fi

if [ $UNATTENDED -eq 0 ]; then
	echo "Select the Base Architecture"
	select SELECTED_ARCH in armv6 armv7 armv7l; do
		if [ "$SELECTED_ARCH" != "" ]; then
			echo "You picked $SELECTED_ARCH"
			read -p "Do you wish to continue? (y/n) " yn
			case $yn in
				[Yy]* ) break;;
				[Nn]* ) exit 1;;
				* ) echo "Please answer yes or no.";;
			esac
		fi
	done
	echo "*****************************************************************"
	echo
else
	SELECTED_ARCH="armv6 armv7 armv7l"
	for RPIARCH in $SELECTED_ARCH; do
		echo "Select kernel branches to build in ${YELLOW}$RPIARCH${NORMAL}."
		options=(`git branch --list --no-color | sed "s|*||"`)
		unset choices

		menu() {
			echo "Avaliable options for ${YELLOW}$RPIARCH${NORMAL}:"
			for i in ${!options[@]}; do
				[[ "${choices[i]}" ]] && C=${YELLOW} || C=${NORMAL}
				printf "%3d%s) %s\n" $((i+1)) "${choices[i]:- }" "$C${options[i]}${NORMAL}"
			done
			[[ "$msg" ]] && echo "$msg"; :
		}

		prompt="Check an option (again to uncheck, ENTER when done): "
		while menu && read -rp "$prompt" num && [[ "$num" ]]; do
			[[ "$num" != *[![:digit:]]* ]] &&
			(( num > 0 && num <= ${#options[@]} )) ||
			{ msg="Invalid option: $num"; continue; }
			((num--)); msg="${options[num]} was ${choices[num]:+un}checked"
			[[ "${choices[num]}" ]] && choices[num]="" || choices[num]="+"
		done

		printf "You selected"; msg=" nothing"
		for i in ${!options[@]}; do 
			[[ "${choices[i]}" ]] && { printf " %s" "${options[i]}"; msg=""; }
			case $RPIARCH in
				armv6)
					armv6_choices[i]="${choices[i]}"
				;;
				armv7)
					armv7_choices[i]="${choices[i]}"
				;;
				armv7l)
					armv7l_choices[i]="${choices[i]}"
				;;
			esac
		done
		echo
		echo "$msg"
		echo "*****************************************************************"
		echo
	done
fi

echo "Kernel Selections...."
for i in ${!options[@]}; do 
	for RPIARCH in $SELECTED_ARCH; do
		case $RPIARCH in
			armv6)
				choices[i]="${armv6_choices[i]}"
			;;
			armv7)
				choices[i]="${armv7_choices[i]}"
			;;
			armv7l)
				choices[i]="${armv7l_choices[i]}"
			;;
		esac
		if [[ "${choices[i]}" ]]; then
			echo "${options[i]} : ${RPIARCH}"
		fi
	done
done

echo ""
echo "Press any key to continue, or <cntrl>-c to abort"
read key

BASENOTES=`mktemp`
echo "NOTES:" >$BASENOTES
$EDITOR $BASENOTES

[ $UNATTENDED -eq 0 ] && SILENT="" || SILENT="--silent"

for i in ${!options[@]}; do 
	for RPIARCH in $SELECTED_ARCH; do
		case $RPIARCH in
			armv6)
				choices[i]="${armv6_choices[i]}"
			;;
			armv7)
				choices[i]="${armv7_choices[i]}"
			;;
			armv7l)
				choices[i]="${armv7l_choices[i]}"
			;;
		esac
		if [[ "${choices[i]}" ]]; then
			BRANCH="${options[i]}"
			git checkout $BRANCH

			#This is the compiler used for Raspbian, supplied by rpi tools
#			export CCPREFIX="${BASEWD}/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin/arm-linux-gnueabihf-"

			if [ "$RPIARCH" = "armv6" ]; then
				#These are built into the compiler
				export CFLAGS="-march=armv6zk -mtune=arm1176jzf-s -mfpu=vfp"
				CCPREFIX="${BASEWD}/x-tools/gcc-linaro-armv6-linux-gnueabihf_x64/bin/arm-bcm2708hf-linux-gnueabihf-"
			elif [ "$RPIARCH" = "armv7" ]; then
				#These are built into the compiler
				export CFLAGS="-march=cortex-a8 -mfpu=neon-vfp4"
				CCPREFIX="${BASEWD}/x-tools/gcc-linaro-armv7-linux-gnueabihf_x64/bin/arm-bcm2709hf-linux-gnueabihf-"
			elif [ "$RPIARCH" = "armv7l" ]; then
				#These are built into the compiler
				export CFLAGS="-march=cortex-a72 -mfpu=neon-vfp4"
				CCPREFIX="${BASEWD}/x-tools/gcc-linaro-armv7-linux-gnueabihf_x64/bin/arm-bcm2709hf-linux-gnueabihf-"
			else
				echo "Cross compiler detection error"
				exit 1
			fi
			echo "Setting Cross Compiler to:${CCPREFIX}"
			echo ""

			#Set username for kernel build string
			export KBUILD_BUILD_USER="pCP"
			export KBUILD_BUILD_HOST="SoundStation"

			if [ $UNATTENDED -eq 0 ]; then
				while true; do
					read -p "Do you need to Clean the linux build tree? (y/n) " yn
					case $yn in
						# Need to manually clean the dtbo's for some reason
						[Yy]* ) CLEAN=1; break;;
						[Nn]* ) CLEAN=0; break;;
						* ) echo "Please answer yes or no.";;
					esac
				done	
			else
				CLEAN=1
			fi
			[ $CLEAN -eq 1 ] && (make $SILENT mrproper; rm -f arch/arm/boot/dts/overlays/*.dtbo;)
			echo "*****************************************************************"
			echo

			if [ -f  .config ]; then
				while true; do
					read -p "There is a .config in the build tree.  Should this be used for this build? (y/n) " yn
					case $yn in
						[Yy]* ) break;;
						[Nn]* ) rm -f .config; break;;
						* ) echo "Please answer yes or no.";;
					esac
				done	
				echo "*****************************************************************"
				echo
			fi

			if [ ! -f .config ]; then
				case $RPIARCH in
					armv6) DEFCONFIG=bcmrpi_defconfig;;
					armv7) DEFCONFIG=bcm2709_defconfig;;
					armv7l) DEFCONFIG=bcm2711_defconfig;;
					*) echo "defconfig selection error"; exit 1;;
				esac

				echo "Generating config from ${DEFCONFIG}....."
				make $SILENT ARCH=arm CROSS_COMPILE=${CCPREFIX} defconfig ${DEFCONFIG}
			fi

			while read LINE; do
				case $LINE in
					VERSION*) VERSION=$(trimval "${LINE}");;
					PATCHLEVEL*) PATCHLEVEL=$(trimval "${LINE}");;
					SUBLEVEL*) SUBLEVEL=$(trimval "${LINE}");;
					NAME*) break;;
					*);;
				esac
			done < Makefile

			GIT_BRANCH=$(git status --porcelain -b)

			echo "*****************************************************************"
			echo
			echo Current git branch: ${GIT_BRANCH}
			echo
			KVERSION=$(printf "%d.%d.%d" $VERSION $PATCHLEVEL $SUBLEVEL)
			echo "Kernel Version:$VERSION"
			echo "Kernel PatchLevel: $PATCHLEVEL"
			echo "Kernel SubLevel: $SUBLEVEL"
			echo
			DATESTAMP=$(date +%m%d%Y%H%M)
			echo "Date Stamp is: ${DATESTAMP}"
			echo
			echo -n "Local Version is set to "
			cat .config |grep "CONFIG_LOCALVERSION="
			echo
			echo "If you need to change, edit \".config\" in another shell"
			echo "Press any key when Ready to continue configuration of the Kernel"
			[ $UNATTENDED -eq 0 ] && read key
			echo
			while read LINE; do
				case $LINE in
					CONFIG_LOCALVERSION=*) 
						LOCALVERSION=$(trimval "${LINE}")
						break
					;;
					*);;
				esac
			done < .config

			case $GIT_BRANCH in
				*pcpRTPatched)RT="-rt";;
				*)RT="";;
			esac

			touch .scmversion
			if [ -f .scmversion ]; then
				KVERSION="${KVERSION}${LOCALVERSION}${RT}"
			else
				KVERSION="${KVERSION}${LOCALVERSION}${RT}+"
			fi

			SAMEKERNELCOUNT=$(find ${BASEWD}/pcpCore/$RPIARCH/kernel/ -maxdepth 1 | grep $KVERSION | wc -l)
			[ $((SAMEKERNELCOUNT++)) -eq 0 ] && SAMEKERNELCOUNT="" || SAMEKERNELCOUNT="${SAMEKERNELCOUNT}-"

			echo "Building for kernel ${KVERSION}:"
			echo "  Saved in ./pcpCore/$RPIARCH/kernel/$KVERSION^${SAMEKERNELCOUNT}${DATESTAMP}"
			echo
			echo "*****************************************************************"
			echo

			case $LOCALVERSION in
			   *Audio*)
			      echo "Disabling Debug...."
			      echo ""
			      scripts/config --disable DEBUG_INFO
			   ;;
			   *);;
			esac

			if [ $UNATTENDED -eq 0 ]; then
				while true; do
					read -p "Do you need to run \"make menuconfig\"? (y/n) " yn
					case $yn in
						[Yy]* ) 
							make ARCH=arm CROSS_COMPILE=${CCPREFIX} -j8  menuconfig
							break
						;;
						[Nn]* ) 
							break
						;;
						* ) echo "Please answer yes or no."
						;;
					esac
				done
			fi
			echo "*****************************************************************"
			echo "Create Build Notes"
			echo 
			NOTES=`mktemp`
			echo "*****************************************************************" > $NOTES
			echo "Build Notes for" >> $NOTES
			echo "Kernel $KVERSION" >> $NOTES
			echo "Date Stamp is: ${DATESTAMP}" >> $NOTES
			echo "Based on Source: ${LINUX_GIT}"  >> $NOTES
			echo "Git Branch: ${GIT_BRANCH}" >> $NOTES
			echo "*****************************************************************" >> $NOTES
			echo "" >> $NOTES
			cat $BASENOTES >> $NOTES

			echo "*****************************************************************"
			if [ $UNATTENDED -eq 0 ]; then 
				echo "Press any Key to start building kernel"
			 	read key
			else
				echo "Building KERNEL: $BRANCH, for $RPIARCH......."
			fi

			if [ ${BUILDKERNEL} -eq 1 ]; then
				make ARCH=arm CROSS_COMPILE=${CCPREFIX} -j ${JOBS} $SILENT zImage
				if [ $? -ne 0 ]; then
					echo "*****************************************************************"
					echo "Error building Kernel.....exiting"
					exit 1
				fi

				make ARCH=arm CROSS_COMPILE=${CCPREFIX} -j ${JOBS} $SILENT modules
				if [ $? -ne 0 ]; then
					echo "*****************************************************************"
					echo "Error building Modules.....exiting"
					exit 1
				fi
				make ARCH=arm CROSS_COMPILE=${CCPREFIX} -j ${JOBS} $SILENT dtbs
				if [ $? -ne 0 ]; then
					echo "*****************************************************************"
					echo "Error building dtbs.....exiting"
					exit 1
				fi
				echo "*****************************************************************"
				echo " Copying Binaries to distribution"

			#	RPIARCH is either armv6 or armv7 or armv7l
				MODPATH="${BASEWD}/pcpCore/${RPIARCH}/modules/${KVERSION}^${SAMEKERNELCOUNT}${DATESTAMP}"
				KERNELPATH="${BASEWD}/pcpCore/${RPIARCH}/kernel/${KVERSION}^${SAMEKERNELCOUNT}${DATESTAMP}"
				CFGPATH="${BASEWD}/pcpCore/${RPIARCH}/configs/${KVERSION}^${SAMEKERNELCOUNT}${DATESTAMP}"

				if [ ! -d $MODPATH ]; then
					mkdir -p $MODPATH
				fi
				if [ ! -d $KERNELPATH/headers ]; then
					mkdir -p $KERNELPATH/headers 
				fi

				make ARCH=arm CROSS_COMPILE=${CCPREFIX} -j ${JOBS} $SILENT INSTALL_MOD_PATH=${MODPATH} INSTALL_MOD_STRIP=1 modules_install
				make ARCH=arm CROSS_COMPILE=${CCPREFIX} -j ${JOBS} $SILENT INSTALL_HDR_PATH=${KERNELPATH}/headers headers_install

				case $RPIARCH in
					armv6)
						cp arch/arm/boot/zImage $KERNELPATH/kernel${VERSION}${PATCHLEVEL}${SUBLEVEL}.img
						cp arch/arm/boot/dts/bcm2708*.dtb $KERNELPATH/
						rsync -q arch/arm/boot/dts/overlays/*.dtbo $KERNELPATH/overlays/
						rsync -q arch/arm/boot/dts/overlays/README* $KERNELPATH/overlays/
					;;
					armv7)
						cp arch/arm/boot/zImage $KERNELPATH/kernel${VERSION}${PATCHLEVEL}${SUBLEVEL}v7.img
						cp arch/arm/boot/dts/bcm2709-rpi-2-b.dtb $KERNELPATH/
						cp arch/arm/boot/dts/bcm2710-rpi-3-b.dtb $KERNELPATH/
						cp arch/arm/boot/dts/bcm2710-rpi-3-b-plus.dtb $KERNELPATH/
						cp arch/arm/boot/dts/bcm2710-rpi-cm3.dtb $KERNELPATH/
						rsync -q arch/arm/boot/dts/overlays/*.dtbo $KERNELPATH/overlays/
						rsync -q arch/arm/boot/dts/overlays/README* $KERNELPATH/overlays/
					;;
					armv7l)
						cp arch/arm/boot/zImage $KERNELPATH/kernel${VERSION}${PATCHLEVEL}${SUBLEVEL}v7l.img
						cp arch/arm/boot/dts/bcm2711*.dtb $KERNELPATH/
						rsync -q arch/arm/boot/dts/overlays/*.dtbo $KERNELPATH/overlays/
						rsync -q arch/arm/boot/dts/overlays/README* $KERNELPATH/overlays/
					;;
				esac

				echo "*****************************************************************"
				echo " Copying kernel configuration files"
				mkdir -p $CFGPATH
				xz -z -9 --stdout .config > $CFGPATH/${KVERSION}_.config.xz
				xz -z -9 --stdout System.map > $CFGPATH/${KVERSION}_System.map.xz
				xz -z -9 --stdout Module.symvers > $CFGPATH/${KVERSION}_Module.symvers.xz

				mv $NOTES $CFGPATH/${KVERSION}.Build_Notes

				echo "KERNEL: $BRANCH, $RPIARCH - Done"
			fi
		fi
	done
done
exit
