From bc950620eafb2ac5e65bb830277abc3fc7e8fd44 Mon Sep 17 00:00:00 2001
From: Martin Sperl <kernel@martin.sperl.org>
Date: Tue, 17 May 2016 08:04:22 +0000
Subject: [PATCH 40/65] ASoC: hw-params-rules: allow array of values to get
 passed to matcher

Allow the device tree to contain "values" in the form
of an u32 array.

Signed-off-by: Martin Sperl <kernel@martin.sperl.org>
---
 .../devicetree/bindings/sound/hw-params-rules.txt  | 15 ++--
 sound/soc/generic/hw-params-rules.c                | 85 +++++++++++++++++++---
 2 files changed, 81 insertions(+), 19 deletions(-)

diff --git a/Documentation/devicetree/bindings/sound/hw-params-rules.txt b/Documentation/devicetree/bindings/sound/hw-params-rules.txt
index fe12baf..a669a42 100644
--- a/Documentation/devicetree/bindings/sound/hw-params-rules.txt
+++ b/Documentation/devicetree/bindings/sound/hw-params-rules.txt
@@ -26,6 +26,7 @@ Required values for methods:
 * asoc_generic_hw_params_set_fixed_bclk_size
 
 - value: u32 value to pass to method.
+- values: u32 value array to pass to method.
 
 Example:
 sound {
@@ -33,20 +34,20 @@ sound {
 	...
 	/*
 	 * set bclk_size to 80 when encountering:
-	 * 48kHz with 2 channels with 32bit/channel
+	 * 48kHz or 96kHz with 2 channels with 32bit/channel
 	 */
 	hw-params-rule@0 {
 		match@0 {
 			method = "asoc_generic_hw_params_match_sample_bits";
-			value = <32>;
+			values = <32>;
 		};
 		match@1 {
 			method = "asoc_generic_hw_params_match_rate";
-			value = <48000>;
+			values = <48000>, <96000>;
 		};
 		match@2 {
 			method = "asoc_generic_hw_params_match_channels";
-			value = <2>;
+			values = <2>;
 		};
 		action@0 {
 			method = "asoc_generic_hw_params_set_fixed_bclk_size";
@@ -60,15 +61,15 @@ sound {
 	hw-params-rule@0 {
 		match@0 {
 			method = "asoc_generic_hw_params_match_sample_bits";
-			value = <16>;
+			values = <16>;
 		};
 		match@1 {
 			method = "asoc_generic_hw_params_match_rate";
-			value = <48000>;
+			values = <48000>;
 		};
 		match@2 {
 			method = "asoc_generic_hw_params_match_channels";
-			value = <2>;
+			values = <2>;
 		};
 		action@0 {
 			method = "asoc_generic_hw_params_set_fixed_bclk_size";
diff --git a/sound/soc/generic/hw-params-rules.c b/sound/soc/generic/hw-params-rules.c
index 2ca827c..90881ef 100644
--- a/sound/soc/generic/hw-params-rules.c
+++ b/sound/soc/generic/hw-params-rules.c
@@ -32,6 +32,48 @@ struct snd_soc_hw_param_rule {
 	struct list_head actions;
 };
 
+struct snd_soc_size_u32array {
+	size_t size;
+	u32 data[];
+};
+
+static int asoc_generic_hw_params_read_u32array(
+	struct device *dev, struct device_node *node, void **data)
+{
+	int i, size, ret;
+	struct snd_soc_size_u32array *array;
+
+	size = of_property_count_elems_of_size(node, "values", sizeof(u32));
+	if (size < 0) {
+		dev_err(dev,
+			"%s: Could not read size of property \"values\" - %d\n",
+			of_node_full_name(node), size);
+		return size;
+	}
+
+	array = devm_kzalloc(dev, sizeof(*array) + sizeof(u32) * size,
+			     GFP_KERNEL);
+	if (!array)
+		return -ENOMEM;
+	*data = array;
+
+	array->size = size;
+
+	for (i = 0; i < size; i++) {
+		ret = of_property_read_u32(node, "values", &array->data[i]);
+		if (ret)
+			return ret;
+	}
+
+	return 0;
+}
+
+static int asoc_generic_hw_params_read_u32(
+	struct device *dev, struct device_node *node, void **data)
+{
+	return of_property_read_u32(node, "value", (u32 *)data);
+}
+
 static int asoc_generic_hw_params_match_sample_bits(
 	struct snd_pcm_substream *substream,
 	struct snd_pcm_hw_params *params,
@@ -39,7 +81,15 @@ static int asoc_generic_hw_params_match_sample_bits(
 {
 	long int bits =
 		snd_pcm_format_physical_width(params_format(params));
-	return (bits == (long int)data);
+	struct snd_soc_size_u32array *array = data;
+	int i;
+
+	for (i = 0; i < array->size; i++) {
+		if (bits == array->data[i])
+			return 1;
+	}
+
+	return 0;
 }
 
 static int asoc_generic_hw_params_match_channels(
@@ -48,8 +98,15 @@ static int asoc_generic_hw_params_match_channels(
 	void *data)
 {
 	int channels = params_channels(params);
+	struct snd_soc_size_u32array *array = data;
+	int i;
 
-	return (channels == (int)data);
+	for (i = 0; i < array->size; i++) {
+		if (channels == array->data[i])
+			return 1;
+	}
+
+	return 0;
 }
 
 static int asoc_generic_hw_params_match_rate(
@@ -59,7 +116,15 @@ static int asoc_generic_hw_params_match_rate(
 {
 	long int rate = params_rate(params);
 
-	return (rate == (long int)data);
+	struct snd_soc_size_u32array *array = data;
+	int i;
+
+	for (i = 0; i < array->size; i++) {
+		if (rate == array->data[i])
+			return 1;
+	}
+
+	return 0;
 }
 
 static int asoc_generic_hw_params_set_fixed_bclk_size(
@@ -73,12 +138,6 @@ static int asoc_generic_hw_params_set_fixed_bclk_size(
 	return snd_soc_dai_set_bclk_ratio(cpu_dai, (unsigned int)data);
 }
 
-static int asoc_generic_hw_params_read_u32(
-	struct device *dev, struct device_node *node, void **data)
-{
-	return of_property_read_u32(node, "value", (u32 *)data);
-}
-
 struct asoc_generic_hw_params_method {
 	const char *name;
 	int (*method)(struct snd_pcm_substream *substream,
@@ -92,12 +151,14 @@ struct asoc_generic_hw_params_method {
 	{.name = #m, .method = m, .parse = p }
 #define HW_PARAMS_METHOD_U32(n) \
 	HW_PARAMS_METHOD(n, asoc_generic_hw_params_read_u32)
+#define HW_PARAMS_METHOD_U32ARRAY(n) \
+	HW_PARAMS_METHOD(n, asoc_generic_hw_params_read_u32array)
 
 static const struct asoc_generic_hw_params_method
 asoc_generic_hw_params_methods[] = {
-	HW_PARAMS_METHOD_U32(asoc_generic_hw_params_match_sample_bits),
-	HW_PARAMS_METHOD_U32(asoc_generic_hw_params_match_rate),
-	HW_PARAMS_METHOD_U32(asoc_generic_hw_params_match_channels),
+	HW_PARAMS_METHOD_U32ARRAY(asoc_generic_hw_params_match_sample_bits),
+	HW_PARAMS_METHOD_U32ARRAY(asoc_generic_hw_params_match_rate),
+	HW_PARAMS_METHOD_U32ARRAY(asoc_generic_hw_params_match_channels),
 	HW_PARAMS_METHOD_U32(asoc_generic_hw_params_set_fixed_bclk_size)
 };
 
-- 
2.7.4

