From 99b93a88d278c8ad60d1b15a57cc8fbc548d603e Mon Sep 17 00:00:00 2001
From: DigitalDreamtime <clive.messer@digitaldreamtime.co.uk>
Date: Fri, 6 May 2016 14:26:41 +0100
Subject: [PATCH 54/65] ES9023: Add 384k support to codec driver

Add 384k support to es9023 codec driver, but continue to default to
the 192k datasheet max.

Enable 384k support if device tree boolean property, "es9023,384k",
is set.

Signed-off-by: DigitalDreamtime <clive.messer@digitaldreamtime.co.uk>
---
 sound/soc/codecs/es9023.c | 68 ++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 67 insertions(+), 1 deletion(-)

diff --git a/sound/soc/codecs/es9023.c b/sound/soc/codecs/es9023.c
index 0e4955c..1088b6b 100644
--- a/sound/soc/codecs/es9023.c
+++ b/sound/soc/codecs/es9023.c
@@ -23,24 +23,90 @@
 
 #include <sound/soc.h>
 
+struct es9023_priv {
+	bool rates_384k;
+};
+
+static const u32 es9023_rates[] = {
+	32000, 44100, 48000, 88200, 96000, 176400, 192000,
+};
+
+static const struct snd_pcm_hw_constraint_list es9023_constraint_rates = {
+        .count = ARRAY_SIZE(es9023_rates),
+        .list = es9023_rates,
+};
+
+static const u32 es9023_8x_rates[] = {
+	32000, 44100, 48000, 88200, 96000, 176400, 192000, 352800, 384000,
+};
+
+static const struct snd_pcm_hw_constraint_list es9023_8x_constraint_rates = {
+        .count = ARRAY_SIZE(es9023_8x_rates),
+        .list = es9023_8x_rates,
+};
+
+static int es9023_dai_startup(struct snd_pcm_substream *substream,
+	struct snd_soc_dai *dai)
+{
+	struct snd_soc_codec *codec = dai->codec;
+	struct es9023_priv *priv = snd_soc_codec_get_drvdata(codec);
+	int ret;
+
+
+	dev_dbg(codec->dev, "%s: set rates (32k-%s) constraint\n", __func__,
+		((priv->rates_384k) ? "384k" : "192k"));
+
+	ret = snd_pcm_hw_constraint_list(substream->runtime, 0,
+					 SNDRV_PCM_HW_PARAM_RATE,
+					 ((priv->rates_384k)
+						? &es9023_8x_constraint_rates
+						: &es9023_constraint_rates));
+	if (ret != 0) {
+		dev_err(codec->dev, "%s: Failed to set rates constraint: %d\n",
+			__func__, ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+static const struct snd_soc_dai_ops es9023_dai_ops = {
+	.startup = es9023_dai_startup,
+};
+
 static struct snd_soc_dai_driver es9023_dai = {
 	.name     = "es9023-hifi",
 	.playback = {
 		.stream_name  = "Playback",
 		.channels_min = 2,
 		.channels_max = 2,
-		.rates        = SNDRV_PCM_RATE_8000_192000,
+		.rates        = SNDRV_PCM_RATE_KNOT,
 		.formats      = SNDRV_PCM_FMTBIT_S16_LE |
 				SNDRV_PCM_FMTBIT_S24_3LE |
 				SNDRV_PCM_FMTBIT_S24_LE |
 				SNDRV_PCM_FMTBIT_S32_LE
 	},
+	.ops      = &es9023_dai_ops,
 };
 
 static struct snd_soc_codec_driver soc_codec_dev_es9023;
 
 static int es9023_probe(struct platform_device *pdev)
 {
+	struct es9023_priv *priv;
+
+	priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL);
+	if (!priv)
+		return -ENOMEM;
+
+#ifdef CONFIG_OF
+	if (pdev->dev.of_node)
+		priv->rates_384k = of_property_read_bool(pdev->dev.of_node,
+							 "es9023,384k");
+#endif
+
+	dev_set_drvdata(&pdev->dev, priv);
+
 	return snd_soc_register_codec(&pdev->dev, &soc_codec_dev_es9023,
 				      &es9023_dai, 1);
 }
-- 
2.7.4

