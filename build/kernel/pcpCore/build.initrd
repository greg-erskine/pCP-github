#!/bin/bash

#################################################################################
#
# build.initrd
#
#	This works by copying a current functioning initrd replacing the kernel modules with the new kernel
#	To include new kernel modules, there is a pause where you can add a module to the new initrd if needed
#	Pretty much this process wont work when making major kernel changes i.e. 4.4.y to 4.9.y
#
# Prep - need to setup some starting points
#
#	path  (versions and initrd's are examples)
#	armv6/initrd/4.4.20/8.0.gz
#	armv7/initrd/4.4.20/8.0_v7.gz
#
#  new initrds will be saved in path based on the new kernel version.  Note, that you need a new kernel for this to work.
#
#

BASEWD=$(pwd)
INITRDWRK="/tmp/initrd-working"

#BUSYBOX=$(which busybox)
#if [ "$BUSYBOX" == "" ]; then
#	echo "busybox with depmod support is required in path"
#	exit 1
#else
#	DEPMOD="${BUSYBOX} depmod"
#	$DEPMOD --help > /dev/null 2>&1
#	[ $? -ne 0 ] && (echo "busybox does not have depmod support"; exit 1)
#fi

DEPMOD=/sbin/depmod

if [ -d armv6 -o -d armv7 ]; then
	echo
	echo "Start from within the armv6 or armv7 directory"
	echo "Usage .$0" >&2
	exit 1
fi

echo "Setting up Sudo....."
sudo echo

[ "$1" = "-a" ] && AUTO=1 || AUTO=0

AVAILINITRD=$(ls -r --sort=time initrd)

echo "Please Select the base initrd to use"
select OLD in $AVAILINITRD;
do
	if [ "$OLD" != "" ]; then
		echo "You picked $OLD"
		read -p "Do you wish to continue?" yn
		case $yn in
			[Yy]* ) break;;
			[Nn]* ) ;;
			* ) echo "Please answer yes or no.";;
		esac
	fi
done

OLDINITRD=$(find ${BASEWD}/* -name "*.gz" | grep --max-count=1 ${OLD})
echo "*****************************************************************"
echo "Selecting initrd ${OLDINITRD}"
echo

if [ -f "${OLDINITRD}" ]; then
	echo "*****************************************************************"
	echo "Removing the old unpacked initrd"
	sudo rm -rf $INITRDWRK
	if [ ! -d $INITRDWRK ]; then
		mkdir $INITRDWRK
		cd $INITRDWRK
		zcat "${OLDINITRD}" | sudo cpio -i -H newc -d
		cd ${BASEWD}
	else
		echo "$INITRDWRK is not empty, please delete and then restart"
		exit 1
	fi
else
	echo "Starting packed initrd not found"
	exit 1
fi

OLDKERNEL=$(ls -r --sort=time $INITRDWRK/lib/modules)
AVAILKERNEL=$(ls -r --sort=time modules)

echo "Kernel in the base initrd is $OLDKERNEL"
echo ""
echo "Select which kernel to build new initrd."
select NEWKERNELDIR in $AVAILKERNEL;
do
	if [ "$NEWKERNELDIR" != "" ]; then
		echo "You picked $NEWKERNELDIR"
		read -p "Do you wish to continue? (y/n)" yn
		case $yn in
			[Yy]* ) break;;
			[Nn]* ) ;;
			* ) echo "Please answer yes or no.";;
		esac
	fi
done
#NEWKERNEL=${NEWKERNELDIR%^*} 
NEWKERNEL=$(ls -1 modules/${NEWKERNELDIR}/lib/modules/)
echo $NEWKERNEL

if [ "${OLDKERNEL}" = "${NEWKERNEL}" ]; then
	echo
	echo "*****************************************************************"
	echo "[ WARN ]Kernel name matches previous initrd"
	echo "Old Kernel: ${OLDKERNEL} directory will be renamed to ${OLDKERNEL}.old"
	sudo mv $INITRDWRK/lib/modules/$OLDKERNEL $INITRDWRK/lib/modules/${OLDKERNEL}.old
	OLDKERNEL=${OLDKERNEL}.old
	echo 
fi

TMPOLDMOD="/tmp/oldmodules.list"

echo
echo "*****************************************************************"
echo "Building Module List"
cd $INITRDWRK/lib/modules/$OLDKERNEL/kernel
find * -not -type d | awk -F '.gz' '{print $1}' > $TMPOLDMOD
cd $BASEWD
echo "Copying new Modules (And new or change paths have to be moved manually)"
SRCMODPATH="modules/${NEWKERNELDIR}/lib/modules/${NEWKERNEL}/kernel"
cd $SRCMODPATH
tar --ignore-failed-read -T $TMPOLDMOD -cf /tmp/$NEWKERNEL.tar
cd $BASEWD
DESTMODPATH="$INITRDWRK/lib/modules/$NEWKERNEL/kernel"
sudo mkdir -p $DESTMODPATH
cd $DESTMODPATH
sudo tar xf /tmp/$NEWKERNEL.tar

# Update the initrd from busybox/kmod/Core-Scripts
sudo $BASEWD/../update.initrd.base

echo "*****************************************************************"
echo "initrd has been updated with modules. ${GREEN}Please add any modules that are needed.${NORMAL}"
echo "New kernel is $NEWKERNEL Located in $NEWKERNELDIR"
echo ""
echo "Press any key to continue"
[ $AUTO -eq 0 ] && read key
echo
echo "*****************************************************************"
echo "Gzipping Modules"
find -name "*.ko" | xargs -r -I {} sudo gzip -9 {}
sudo rm -rf $INITRDWRK/usr/local/lib/modules/${OLDKERNEL%.old}
sudo mkdir -p $INITRDWRK/usr/local/lib/modules/$NEWKERNEL/kernel
echo
echo "Copy Builtin Module Files"
cd $BASEWD
sudo cp modules/${NEWKERNELDIR}/lib/modules/${NEWKERNEL}/modules.builtin $INITRDWRK/lib/modules/$NEWKERNEL/
sudo cp modules/${NEWKERNELDIR}/lib/modules/${NEWKERNEL}/modules.devname $INITRDWRK/lib/modules/$NEWKERNEL/
sudo cp modules/${NEWKERNELDIR}/lib/modules/${NEWKERNEL}/modules.order $INITRDWRK/lib/modules/$NEWKERNEL/

#remove kernel.tclocal to prevent kmod from printing an error message
cd $DESTMODPATH
cd ..
[ -f kernel.tclocal ] && sudo rm -f kernel.tclocal

#echo "Running busybox depmod"
echo "Running kmod depmod"
sudo $DEPMOD -b $INITRDWRK $NEWKERNEL

echo "Setting up kernel.tclocal symlink"
sudo ln -s /usr/local/lib/modules/$NEWKERNEL/kernel kernel.tclocal
cd $BASEWD

if [ $AUTO -eq 0 ]; then
echo "*****************************************************************"
	while true
	do
		PCPOSVER=$(cat $INITRDWRK/usr/share/doc/tc/release.txt)
		echo "Release name is: ${PCPOSVER}"
		echo
		echo "Please enter new string, or enter to keep the same"
		read key
		if [ "$key" != "" ]; then
			PCPOSVER=${key//[$'\t\r\n ']}
			echo "You entered :${PCPOSVER}"
		else
			echo "Keeping the string :${PCPOSVER}"
		fi
		read -p "Is this correct? (y/n) " yn
		case $yn in
			[Yy]* ) sudo sh -c "echo ${PCPOSVER} > $INITRDWRK/usr/share/doc/tc/release.txt";break;;
			[Nn]* ) ;;
			* ) echo "Please answer yes or no.";;
		esac
	done
fi

echo "*****************************************************************"
echo "Removing old modules"
sudo rm -rf $INITRDWRK/lib/modules/$OLDKERNEL
#select REMOVE in $(ls $INITRDWRK/lib/modules)
#do
#	if [ "$REMOVE" != "" ]; then
#		echo "You picked $REMOVE"
#		read -p "Do you wish to continue? (y/n) " yn
#		case $yn in
#			[Yy]* ) sudo rm -rf $INITRDWRK/lib/modules/$REMOVE; break;;
#			[Nn]* ) ;;
#			* ) echo "Please answer yes or no.";;
#		esac
#	fi
#done

if [ $AUTO -eq 0 ]; then
	echo "*****************************************************************"
	echo "Name for the initrd for kernel $NEWKERNELDIR"
	echo 
	echo "Old initrd name was $(basename ${OLDINITRD})"
	echo
	echo "Enter new name, or press enter to keep old name"
	read key
else
	key=""
fi
if [ "${key}" != "" ]; then
	NEWINITRD=${key//[$'\t\r\n ']}
else
	NEWINITRD=$(basename ${OLDINITRD})
fi
echo
echo "*****************************************************************"
echo "Ready to build new initrd $NEWINITRD"
echo "Press any key to continue, or ctrl-c to abort"
[ $AUTO -eq 0 ] && read key
NEWINITRDDIR=$BASEWD/initrd/$NEWKERNELDIR
mkdir -p $NEWINITRDDIR
cd $DESTMODPATH
find * -not -type d > /tmp/module.lst
sort /tmp/module.lst > $NEWINITRDDIR/module.lst
cd $INITRDWRK
sudo find | sudo cpio -o -H newc | gzip -9 > $NEWINITRDDIR/${NEWINITRD%.gz}.gz
echo "Launching recompression in the background"
advdef -z4 $NEWINITRDDIR/${NEWINITRD%.gz}.gz 2>&1 > /dev/null &
cd $BASEWD
echo
echo "Cleanup - Temp Files"
sudo rm -rf $INITRDWRK
sudo rm -rf /tmp/$NEWKERNEL.tar
echo "Done"
